const studentPacks = [
  {
    "name": "CS — Data Structures — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — data structures.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview Questions Generator",
        "slug": "cs-data-structures-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20 common interview and viva questions for Data Structures, covering topics like arrays, linked lists, stacks, queues, trees, graphs, hash tables, and heaps. For each question, include: 1) The question itself, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint for approaching the answer, and 5) Related follow-up questions that interviewers might ask. Organize questions by data structure type and include both theoretical concepts and practical implementation questions."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-data-structures-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Data Structures assignments that evaluates: 1) Code correctness and functionality (30%) - Does the implementation work as expected? Are edge cases handled? 2) Algorithm efficiency (25%) - Time and space complexity analysis, optimal solution selection, 3) Code quality (20%) - Readability, proper naming conventions, comments, modular design, 4) Understanding of concepts (15%) - Proper use of data structures, understanding of trade-offs, 5) Testing (10%) - Test cases coverage, boundary conditions. Include a 5-point scale for each criterion with specific descriptors for each level, and provide constructive feedback guidelines for reviewers."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-data-structures-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5 solved examples for Data Structures problems with complete step-by-step explanations. For each problem: 1) State the problem clearly with input/output examples, 2) Explain the intuition and approach, 3) Discuss multiple solution approaches (brute force, optimized), 4) Provide detailed pseudocode with line-by-line explanation, 5) Include complete working code in Python/Java/C++, 6) Analyze time and space complexity with detailed reasoning, 7) Show dry run with a sample input, 8) Discuss edge cases and how they're handled, 9) Suggest variations and related problems. Cover diverse topics: array manipulation, linked list operations, tree traversals, graph algorithms, and hash table applications."
      },
      {
        "title": "Complete Cheat Sheet",
        "slug": "cs-data-structures-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive Data Structures cheat sheet covering: 1) Arrays & Strings - operations, time complexities, common patterns (two pointers, sliding window), 2) Linked Lists - singly, doubly, circular, operations (insertion, deletion, reversal), 3) Stacks & Queues - implementation methods, applications (expression evaluation, BFS), 4) Trees - binary trees, BST, AVL, operations (traversals, insertion, deletion), properties, 5) Heaps - min/max heap, heapify, priority queue applications, 6) Hash Tables - collision handling, load factor, common uses, 7) Graphs - representations (adjacency matrix/list), traversals (DFS, BFS), shortest path algorithms, 8) Advanced structures - Trie, Segment Tree, Disjoint Set. For each structure include: definition, visual diagram, key operations with time/space complexity, when to use, implementation tips, and common interview patterns."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-data-structures-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30 practice questions for Data Structures divided into: 10 Easy, 15 Medium, and 5 Hard problems. For each question provide: 1) Clear problem statement with examples, 2) Input/output format and constraints, 3) Difficulty level and estimated time, 4) Tags indicating which data structures/algorithms are needed, 5) Hints (progressively revealing), 6) Expected time and space complexity for optimal solution. Cover variety of topics: array manipulations, string processing, linked list problems, stack/queue applications, tree problems (traversal, construction, properties), graph problems (connectivity, shortest path), hash table problems, heap operations, and mixed problems requiring multiple data structures. Include both implementation and conceptual questions."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-data-structures-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 5 detailed mini-project briefs for Data Structures, each including: 1) Project title and overview, 2) Learning objectives - specific data structures and algorithms to implement, 3) Detailed requirements and features to implement, 4) Suggested tech stack and tools, 5) Data structures to be used and why, 6) Implementation phases with milestones, 7) Testing strategy and sample test cases, 8) Bonus features for advanced students, 9) Evaluation criteria, 10) Estimated timeline (1-2 weeks). Project ideas: a) File System Simulator (trees, hash tables), b) Social Network Analyzer (graphs, BFS/DFS), c) Expression Evaluator & Calculator (stacks, trees), d) Memory Cache Implementation (hash tables, linked lists, LRU), e) Text Editor with Undo/Redo (stacks, arrays). Each project should be practical, engaging, and reinforce multiple data structure concepts."
      }
    ]
  },
  {
    "name": "CS — Algorithms — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — algorithms.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Exam Pitfalls",
        "slug": "cs-algorithms-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common exam pitfalls for Algorithms. Cover: 1) Off-by-one errors in loops and array indexing, 2) Infinite loops in recursion (missing base cases), 3) Integer overflow in calculations, 4) Incorrect complexity analysis mistakes, 5) Edge cases often missed (empty input, single element, duplicates), 6) Common mistakes in sorting algorithms (stability, in-place requirements), 7) Graph algorithm pitfalls (disconnected graphs, cycles, directed vs undirected), 8) Dynamic programming errors (wrong state definition, missing memoization), 9) Greedy algorithm validation (when greedy fails), 10) Time limit exceeded issues and optimization strategies. For each pitfall, provide: what it is, why it happens, how to detect it, how to fix it, and a code example demonstrating the issue and solution."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-algorithms-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 25 common interview and viva questions for Algorithms covering: 1) Sorting & Searching - comparison of algorithms, best/worst cases, stability, 2) Divide & Conquer - merge sort, quick sort, binary search variations, 3) Dynamic Programming - identifying DP problems, memoization vs tabulation, classic problems (knapsack, LCS, LIS), 4) Greedy Algorithms - when to use, proof of correctness, activity selection, Huffman coding, 5) Graph Algorithms - BFS, DFS, Dijkstra, Bellman-Ford, MST algorithms, 6) Backtracking - N-Queens, Sudoku solver, subset sum, 7) String Algorithms - pattern matching, KMP, Rabin-Karp, 8) Complexity Analysis - Big O, Theta, Omega notations, Master theorem. For each question include: difficulty level, key concepts tested, expected answer outline, and follow-up questions interviewers typically ask."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-algorithms-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Algorithm assignments evaluating: 1) Correctness (30%) - Does the algorithm produce correct output for all test cases including edge cases? 2) Efficiency (25%) - Is the time/space complexity optimal? Is the complexity analysis accurate? 3) Algorithm Design (20%) - Appropriate algorithm paradigm chosen (DP, greedy, divide-conquer)? Clear problem-solving approach? 4) Code Quality (15%) - Clean implementation, meaningful variable names, proper comments explaining logic, 5) Proof/Justification (10%) - For greedy/DP: proof of correctness, recurrence relations, state transitions explained. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors. Add sections for: strengths identified, areas for improvement, specific suggestions, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-algorithms-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive Algorithms cheat sheet covering: 1) Sorting - Bubble, Selection, Insertion (O(n²)), Merge, Quick, Heap (O(n log n)), Counting, Radix (O(n)), stability comparison, 2) Searching - Linear, Binary, Interpolation, complexity analysis, 3) Divide & Conquer - paradigm, recurrence relations, Master theorem, examples, 4) Dynamic Programming - when to use, top-down vs bottom-up, classic problems (Knapsack, LCS, LIS, Edit Distance, Matrix Chain), 5) Greedy - paradigm, proof techniques, problems (Activity Selection, Fractional Knapsack, Huffman), 6) Graph Algorithms - representations, BFS, DFS, Dijkstra, Bellman-Ford, Floyd-Warshall, Prim's, Kruskal's, Topological Sort, 7) Backtracking - template, pruning, problems, 8) String Algorithms - KMP, Rabin-Karp, Z-algorithm. For each: pseudocode, time/space complexity, when to use, implementation tips, common variations."
      },
      {
        "title": "Practice Problems Collection",
        "slug": "cs-algorithms-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 35 practice problems for Algorithms: 12 Easy, 18 Medium, 5 Hard. For each problem: 1) Clear problem statement with examples, 2) Input/output specifications and constraints, 3) Difficulty level and estimated solving time, 4) Algorithm paradigm tags (DP, Greedy, Divide-Conquer, etc.), 5) Hints at different levels (approach hint, algorithm hint, implementation hint), 6) Expected time and space complexity. Cover topics: Sorting variations, Binary search applications, Two pointers technique, Sliding window, Recursion and backtracking, Dynamic programming (1D, 2D, knapsack variants), Greedy algorithms, Graph traversals and shortest paths, String matching, Bit manipulation, Mathematical algorithms. Include both standard algorithmic problems and real-world application scenarios."
      },
      {
        "title": "Algorithm Mini-Projects",
        "slug": "cs-algorithms-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 5 detailed algorithm mini-project briefs: 1) Route Optimization System - Implement Dijkstra's and A* algorithms for GPS navigation, compare performance, visualize paths, handle real map data. 2) Text Compression Tool - Implement Huffman coding, LZW compression, compare compression ratios, build encoder/decoder with file I/O. 3) Task Scheduler Simulator - Implement various scheduling algorithms (FCFS, SJF, Round Robin, Priority), visualize Gantt charts, calculate metrics (turnaround time, waiting time). 4) Pattern Matching Engine - Implement KMP, Boyer-Moore, Rabin-Karp for text search, benchmark performance on large texts, build simple search tool. 5) Sorting Algorithm Visualizer - Implement 6+ sorting algorithms, create animated visualizations, allow step-by-step execution, compare performance metrics. Each project includes: objectives, required algorithms, implementation phases, testing strategy, deliverables, evaluation criteria, and 2-week timeline."
      },
      {
        "title": "Solved Examples with Explanations",
        "slug": "cs-algorithms-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 6 fully solved algorithm problems with detailed step-by-step explanations: 1) 0/1 Knapsack (Dynamic Programming) - problem statement, recursive approach, memoization, tabulation, space optimization, complete code with comments, dry run with example, 2) Dijkstra's Shortest Path - problem setup, algorithm explanation, priority queue implementation, complete code, trace through example graph, 3) Longest Common Subsequence - problem definition, recursive relation, DP table construction, backtracking to find LCS, code implementation, example walkthrough, 4) Quick Sort - partitioning logic, recursive structure, pivot selection strategies, complete implementation, complexity analysis, example trace, 5) Activity Selection (Greedy) - problem statement, greedy choice property proof, algorithm steps, code, example execution, 6) N-Queens (Backtracking) - problem setup, backtracking template, pruning strategy, complete solution, visualization of backtracking tree. Each solution includes: intuition, multiple approaches, complexity analysis, complete working code, and variations."
      },
      {
        "title": "7-Day Intensive Study Plan",
        "slug": "cs-algorithms-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Algorithms: Day 1 - Complexity Analysis & Sorting (Big O notation, comparison-based sorts, counting/radix sort, 5 practice problems), Day 2 - Searching & Divide-Conquer (Binary search variations, merge sort, quick sort, Master theorem, 6 problems), Day 3 - Dynamic Programming Basics (Memoization, tabulation, Fibonacci, climbing stairs, coin change, 8 problems), Day 4 - Advanced DP (Knapsack, LCS, LIS, edit distance, matrix chain multiplication, 8 problems), Day 5 - Greedy Algorithms (Activity selection, fractional knapsack, Huffman coding, proofs of correctness, 6 problems), Day 6 - Graph Algorithms (BFS, DFS, Dijkstra, Bellman-Ford, MST algorithms, 8 problems), Day 7 - Backtracking & Review (N-Queens, Sudoku, subset sum, comprehensive review, 10 mixed problems). Each day includes: learning objectives, theory resources (video links, articles), practice problems with solutions, time allocation (2-3 hours theory, 2-3 hours practice), and self-assessment quiz."
      }
    ]
  },
  {
    "name": "CS — Operating Systems — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — operating systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-operating-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Operating Systems. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-operating-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Operating Systems with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Operating Systems including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-operating-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Operating Systems, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Operating Systems that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Operating Systems topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-operating-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Operating Systems. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-operating-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Operating Systems organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-operating-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Operating Systems with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Operating Systems, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-operating-systems-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Operating Systems covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-operating-systems-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Operating Systems with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Operating Systems."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-operating-systems-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Operating Systems. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Operating Systems."
      }
    ]
  },
  {
    "name": "CS — Computer Networks — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — computer networks.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-computer-networks-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Computer Networks assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-computer-networks-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Computer Networks. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Computer Networks."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-computer-networks-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Computer Networks organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-computer-networks-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Computer Networks. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-computer-networks-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Computer Networks. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-computer-networks-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Computer Networks with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Computer Networks."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-computer-networks-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Computer Networks covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-computer-networks-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Computer Networks with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Computer Networks including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-computer-networks-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Computer Networks with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Computer Networks, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "CS — Databases (SQL) — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — databases (sql).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-databases-sql-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Databases (SQL), each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Databases (SQL) that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Databases (SQL) topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-databases-sql-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Databases (SQL) covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-databases-sql-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Databases (SQL). For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Databases (SQL)."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-databases-sql-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Databases (SQL) with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Databases (SQL), include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-databases-sql-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Databases (SQL) with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Databases (SQL)."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-databases-sql-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Databases (SQL) with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Databases (SQL) including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "CS — NoSQL & MongoDB — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — nosql & mongodb.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-nosql-mongodb-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for NoSQL & MongoDB. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-nosql-mongodb-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for NoSQL & MongoDB with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in NoSQL & MongoDB including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-nosql-mongodb-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for NoSQL & MongoDB with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in NoSQL & MongoDB, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-nosql-mongodb-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for NoSQL & MongoDB organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-nosql-mongodb-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for NoSQL & MongoDB with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of NoSQL & MongoDB."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-nosql-mongodb-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for NoSQL & MongoDB assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-nosql-mongodb-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for NoSQL & MongoDB. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  },
  {
    "name": "CS — OOP in Python — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — oop in python.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-oop-in-python-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for OOP in Python. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-oop-in-python-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for OOP in Python. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-oop-in-python-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for OOP in Python assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-oop-in-python-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for OOP in Python covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-oop-in-python-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for OOP in Python organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-oop-in-python-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for OOP in Python with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of OOP in Python."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-oop-in-python-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for OOP in Python, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from OOP in Python that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how OOP in Python topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-oop-in-python-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for OOP in Python with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in OOP in Python including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-oop-in-python-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for OOP in Python with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in OOP in Python, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "CS — Web Dev (MERN) — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — web dev (mern).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-web-dev-mern-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Web Dev (MERN). Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-web-dev-mern-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Web Dev (MERN). Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-web-dev-mern-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Web Dev (MERN) with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Web Dev (MERN) including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-web-dev-mern-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Web Dev (MERN) assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-web-dev-mern-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Web Dev (MERN). For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Web Dev (MERN)."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-web-dev-mern-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Web Dev (MERN), each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Web Dev (MERN) that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Web Dev (MERN) topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "CS — System Design Basics — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — system design basics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "cs-system-design-basics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for System Design Basics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in System Design Basics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-system-design-basics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for System Design Basics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-system-design-basics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for System Design Basics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-system-design-basics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for System Design Basics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-system-design-basics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for System Design Basics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-system-design-basics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for System Design Basics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-system-design-basics-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for System Design Basics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of System Design Basics."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-system-design-basics-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for System Design Basics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from System Design Basics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how System Design Basics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-system-design-basics-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for System Design Basics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in System Design Basics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "CS — DevOps for Beginners — Pack 1",
    "category": "student",
    "description": "Helpful prompts for cs — devops for beginners.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-devops-for-beginners-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for DevOps for Beginners assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-devops-for-beginners-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for DevOps for Beginners covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-devops-for-beginners-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for DevOps for Beginners. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-devops-for-beginners-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for DevOps for Beginners organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-devops-for-beginners-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for DevOps for Beginners, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from DevOps for Beginners that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how DevOps for Beginners topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-devops-for-beginners-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for DevOps for Beginners. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-devops-for-beginners-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for DevOps for Beginners with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of DevOps for Beginners."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-devops-for-beginners-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for DevOps for Beginners with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in DevOps for Beginners including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-devops-for-beginners-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for DevOps for Beginners. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to DevOps for Beginners."
      }
    ]
  },
  {
    "name": "EE — Circuits & Signals — Pack 1",
    "category": "student",
    "description": "Helpful prompts for ee — circuits & signals.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "ee-circuits-signals-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Circuits & Signals, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Circuits & Signals that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Circuits & Signals topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "ee-circuits-signals-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Circuits & Signals. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "ee-circuits-signals-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Circuits & Signals assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "ee-circuits-signals-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Circuits & Signals. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "ee-circuits-signals-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Circuits & Signals organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "ee-circuits-signals-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Circuits & Signals covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "ee-circuits-signals-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Circuits & Signals with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Circuits & Signals."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "ee-circuits-signals-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Circuits & Signals. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Circuits & Signals."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "ee-circuits-signals-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Circuits & Signals with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Circuits & Signals including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "EE — Control Systems — Pack 1",
    "category": "student",
    "description": "Helpful prompts for ee — control systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "ee-control-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Control Systems, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Control Systems that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Control Systems topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "ee-control-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Control Systems. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "ee-control-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Control Systems assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "ee-control-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Control Systems with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Control Systems including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "ee-control-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Control Systems. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "ee-control-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Control Systems organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "ME — Thermodynamics — Pack 1",
    "category": "student",
    "description": "Helpful prompts for me — thermodynamics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Practice Questions Bank",
        "slug": "me-thermodynamics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Thermodynamics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Thermodynamics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "me-thermodynamics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Thermodynamics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "me-thermodynamics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Thermodynamics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "me-thermodynamics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Thermodynamics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "me-thermodynamics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Thermodynamics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Thermodynamics."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "me-thermodynamics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Thermodynamics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Thermodynamics."
      }
    ]
  },
  {
    "name": "ME — Strength of Materials — Pack 1",
    "category": "student",
    "description": "Helpful prompts for me — strength of materials.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "me-strength-of-materials-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Strength of Materials with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Strength of Materials."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "me-strength-of-materials-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Strength of Materials. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "me-strength-of-materials-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Strength of Materials covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "me-strength-of-materials-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Strength of Materials with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Strength of Materials including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "me-strength-of-materials-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Strength of Materials, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Strength of Materials that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Strength of Materials topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "me-strength-of-materials-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Strength of Materials. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "me-strength-of-materials-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Strength of Materials. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Strength of Materials."
      }
    ]
  },
  {
    "name": "Civil — Structural Basics — Pack 1",
    "category": "student",
    "description": "Helpful prompts for civil — structural basics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Essential Formulas & Definitions",
        "slug": "civil-structural-basics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Structural Basics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "civil-structural-basics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Structural Basics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "civil-structural-basics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Structural Basics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "civil-structural-basics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Structural Basics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "civil-structural-basics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Structural Basics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Structural Basics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Structural Basics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Structured Study Plan",
        "slug": "civil-structural-basics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Structural Basics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Structural Basics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "Civil — Surveying & GIS — Pack 1",
    "category": "student",
    "description": "Helpful prompts for civil — surveying & gis.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Learning Resources Guide",
        "slug": "civil-surveying-gis-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Surveying & GIS organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Structured Study Plan",
        "slug": "civil-surveying-gis-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Surveying & GIS with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Surveying & GIS, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "civil-surveying-gis-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Surveying & GIS. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Surveying & GIS."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "civil-surveying-gis-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Surveying & GIS with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Surveying & GIS including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "civil-surveying-gis-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Surveying & GIS. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "civil-surveying-gis-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Surveying & GIS assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "civil-surveying-gis-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Surveying & GIS with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Surveying & GIS."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "civil-surveying-gis-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Surveying & GIS, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Surveying & GIS that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Surveying & GIS topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "civil-surveying-gis-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Surveying & GIS covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Math — Calculus — Pack 1",
    "category": "student",
    "description": "Helpful prompts for math — calculus.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-calculus-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Calculus. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "math-calculus-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Calculus organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-calculus-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Calculus with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Calculus, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-calculus-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Calculus. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-calculus-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Calculus with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Calculus including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-calculus-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Calculus assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-calculus-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Calculus with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Calculus."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-calculus-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Calculus, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Calculus that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Calculus topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Math — Linear Algebra — Pack 1",
    "category": "student",
    "description": "Helpful prompts for math — linear algebra.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-linear-algebra-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Linear Algebra assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "math-linear-algebra-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Linear Algebra covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-linear-algebra-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Linear Algebra with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Linear Algebra, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-linear-algebra-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Linear Algebra. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-linear-algebra-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Linear Algebra, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Linear Algebra that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Linear Algebra topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "math-linear-algebra-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Linear Algebra. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Linear Algebra."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "math-linear-algebra-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Linear Algebra organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "Math — Probability & Stats — Pack 1",
    "category": "student",
    "description": "Helpful prompts for math — probability & stats.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-probability-stats-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Probability & Stats. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-probability-stats-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Probability & Stats with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Probability & Stats including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "math-probability-stats-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Probability & Stats organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-probability-stats-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Probability & Stats with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Probability & Stats."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-probability-stats-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Probability & Stats with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Probability & Stats, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "math-probability-stats-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Probability & Stats covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Physics — Core — Pack 1",
    "category": "student",
    "description": "Helpful prompts for physics — core.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview & Viva Questions",
        "slug": "physics-core-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Core. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Core."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "physics-core-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Core. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "physics-core-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Core organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "physics-core-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Core with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Core including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "physics-core-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Core. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "physics-core-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Core covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "physics-core-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Core assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "physics-core-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Core with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Core."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "physics-core-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Core, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Core that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Core topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Commerce — Accounting — Pack 1",
    "category": "student",
    "description": "Helpful prompts for commerce — accounting.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-accounting-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Accounting organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-accounting-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Accounting with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Accounting, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-accounting-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Accounting covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-accounting-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Accounting with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Accounting including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-accounting-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Accounting with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Accounting."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-accounting-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Accounting assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Commerce — Corporate Finance — Pack 1",
    "category": "student",
    "description": "Helpful prompts for commerce — corporate finance.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "commerce-corporate-finance-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Corporate Finance with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Corporate Finance, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-corporate-finance-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Corporate Finance. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-corporate-finance-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Corporate Finance covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-corporate-finance-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Corporate Finance. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-corporate-finance-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Corporate Finance assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-corporate-finance-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Corporate Finance, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Corporate Finance that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Corporate Finance topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Commerce — Marketing — Pack 1",
    "category": "student",
    "description": "Helpful prompts for commerce — marketing.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-marketing-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Marketing. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-marketing-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Marketing with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Marketing including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-marketing-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Marketing organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-marketing-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Marketing. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Marketing."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-marketing-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Marketing with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Marketing, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-marketing-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Marketing, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Marketing that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Marketing topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-marketing-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Marketing with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Marketing."
      }
    ]
  },
  {
    "name": "Commerce — Operations & SCM — Pack 1",
    "category": "student",
    "description": "Helpful prompts for commerce — operations & scm.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-operations-scm-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Operations & SCM, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Operations & SCM that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Operations & SCM topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-operations-scm-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Operations & SCM. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Operations & SCM."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-operations-scm-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Operations & SCM with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Operations & SCM including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-operations-scm-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Operations & SCM assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-operations-scm-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Operations & SCM. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-operations-scm-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Operations & SCM with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Operations & SCM, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-operations-scm-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Operations & SCM with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Operations & SCM."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-operations-scm-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Operations & SCM. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-operations-scm-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Operations & SCM covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Commerce — Business Law — Pack 1",
    "category": "student",
    "description": "Helpful prompts for commerce — business law.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-business-law-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Business Law, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Business Law that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Business Law topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-business-law-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Business Law. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-business-law-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Business Law covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-business-law-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Business Law. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Business Law."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-business-law-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Business Law with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Business Law."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-business-law-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Business Law with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Business Law, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "Commerce — Economics — Pack 1",
    "category": "student",
    "description": "Helpful prompts for commerce — economics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-economics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Economics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Economics."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-economics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Economics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Economics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Economics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-economics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Economics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-economics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Economics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-economics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Economics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-economics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Economics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Economics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-economics-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Economics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Economics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Study Skills — Spaced Repetition — Pack 1",
    "category": "student",
    "description": "Helpful prompts for study skills — spaced repetition.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Study Skills — Spaced Repetition: 1",
        "slug": "study-skills-spaced-repetition-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Spaced Repetition. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Spaced Repetition."
      },
      {
        "title": "Study Skills — Spaced Repetition: 2",
        "slug": "study-skills-spaced-repetition-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Spaced Repetition with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Spaced Repetition."
      },
      {
        "title": "Study Skills — Spaced Repetition: 3",
        "slug": "study-skills-spaced-repetition-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Spaced Repetition assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Study Skills — Spaced Repetition: 4",
        "slug": "study-skills-spaced-repetition-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Spaced Repetition with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Spaced Repetition, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Study Skills — Spaced Repetition: 5",
        "slug": "study-skills-spaced-repetition-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Spaced Repetition. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Study Skills — Spaced Repetition: 6",
        "slug": "study-skills-spaced-repetition-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Spaced Repetition organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Study Skills — Spaced Repetition: 7",
        "slug": "study-skills-spaced-repetition-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Spaced Repetition. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Study Skills — Spaced Repetition: 8",
        "slug": "study-skills-spaced-repetition-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Spaced Repetition covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Study Skills — Spaced Repetition: 9",
        "slug": "study-skills-spaced-repetition-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Spaced Repetition with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Spaced Repetition including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Study Skills — Exam Strategy — Pack 1",
    "category": "student",
    "description": "Helpful prompts for study skills — exam strategy.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Study Skills — Exam Strategy: 1",
        "slug": "study-skills-exam-strategy-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Exam Strategy with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Exam Strategy including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Study Skills — Exam Strategy: 2",
        "slug": "study-skills-exam-strategy-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Exam Strategy. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Study Skills — Exam Strategy: 3",
        "slug": "study-skills-exam-strategy-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Exam Strategy assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Study Skills — Exam Strategy: 4",
        "slug": "study-skills-exam-strategy-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Exam Strategy. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Exam Strategy."
      },
      {
        "title": "Study Skills — Exam Strategy: 5",
        "slug": "study-skills-exam-strategy-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Exam Strategy, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Exam Strategy that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Exam Strategy topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Study Skills — Exam Strategy: 6",
        "slug": "study-skills-exam-strategy-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Exam Strategy organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Study Skills — Exam Strategy: 7",
        "slug": "study-skills-exam-strategy-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Exam Strategy. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Study Skills — Exam Strategy: 8",
        "slug": "study-skills-exam-strategy-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Exam Strategy with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Exam Strategy."
      },
      {
        "title": "Study Skills — Exam Strategy: 9",
        "slug": "study-skills-exam-strategy-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Exam Strategy covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Writing — Reports & Thesis — Pack 1",
    "category": "student",
    "description": "Helpful prompts for writing — reports & thesis.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Writing — Reports & Thesis: 1",
        "slug": "writing-reports-thesis-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Reports & Thesis. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Reports & Thesis."
      },
      {
        "title": "Writing — Reports & Thesis: 2",
        "slug": "writing-reports-thesis-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Reports & Thesis. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Writing — Reports & Thesis: 3",
        "slug": "writing-reports-thesis-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Reports & Thesis with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Reports & Thesis."
      },
      {
        "title": "Writing — Reports & Thesis: 4",
        "slug": "writing-reports-thesis-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Reports & Thesis with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Reports & Thesis including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Writing — Reports & Thesis: 5",
        "slug": "writing-reports-thesis-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Reports & Thesis covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Writing — Reports & Thesis: 6",
        "slug": "writing-reports-thesis-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Reports & Thesis organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Writing — Reports & Thesis: 7",
        "slug": "writing-reports-thesis-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Reports & Thesis assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Writing — Reports & Thesis: 8",
        "slug": "writing-reports-thesis-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Reports & Thesis. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  },
  {
    "name": "Presentation — Slides & Delivery — Pack 1",
    "category": "student",
    "description": "Helpful prompts for presentation — slides & delivery.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Presentation — Slides & Delivery: 1",
        "slug": "presentation-slides-delivery-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Slides & Delivery. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Slides & Delivery."
      },
      {
        "title": "Presentation — Slides & Delivery: 2",
        "slug": "presentation-slides-delivery-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Slides & Delivery with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Slides & Delivery, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Presentation — Slides & Delivery: 3",
        "slug": "presentation-slides-delivery-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Slides & Delivery organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Presentation — Slides & Delivery: 4",
        "slug": "presentation-slides-delivery-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Slides & Delivery. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Presentation — Slides & Delivery: 5",
        "slug": "presentation-slides-delivery-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Slides & Delivery with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Slides & Delivery including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Presentation — Slides & Delivery: 6",
        "slug": "presentation-slides-delivery-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Slides & Delivery with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Slides & Delivery."
      },
      {
        "title": "Presentation — Slides & Delivery: 7",
        "slug": "presentation-slides-delivery-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Slides & Delivery. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Presentation — Slides & Delivery: 8",
        "slug": "presentation-slides-delivery-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Slides & Delivery covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Presentation — Slides & Delivery: 9",
        "slug": "presentation-slides-delivery-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Slides & Delivery, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Slides & Delivery that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Slides & Delivery topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Career — Resume & Portfolio — Pack 1",
    "category": "student",
    "description": "Helpful prompts for career — resume & portfolio.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Career — Resume & Portfolio: 1",
        "slug": "career-resume-portfolio-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Resume & Portfolio. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Resume & Portfolio."
      },
      {
        "title": "Career — Resume & Portfolio: 2",
        "slug": "career-resume-portfolio-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Resume & Portfolio, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Resume & Portfolio that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Resume & Portfolio topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Career — Resume & Portfolio: 3",
        "slug": "career-resume-portfolio-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Resume & Portfolio covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Career — Resume & Portfolio: 4",
        "slug": "career-resume-portfolio-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Resume & Portfolio organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Career — Resume & Portfolio: 5",
        "slug": "career-resume-portfolio-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Resume & Portfolio with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Resume & Portfolio, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Career — Resume & Portfolio: 6",
        "slug": "career-resume-portfolio-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Resume & Portfolio. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Career — Resume & Portfolio: 7",
        "slug": "career-resume-portfolio-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Resume & Portfolio with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Resume & Portfolio."
      },
      {
        "title": "Career — Resume & Portfolio: 8",
        "slug": "career-resume-portfolio-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Resume & Portfolio assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Career — Interview Drills — Pack 1",
    "category": "student",
    "description": "Helpful prompts for career — interview drills.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Career — Interview Drills: 1",
        "slug": "career-interview-drills-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 2",
        "slug": "career-interview-drills-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 3",
        "slug": "career-interview-drills-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 4",
        "slug": "career-interview-drills-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 5",
        "slug": "career-interview-drills-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 6",
        "slug": "career-interview-drills-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 7",
        "slug": "career-interview-drills-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      }
    ]
  },
  {
    "name": "Projects — Ideas & Scopes — Pack 1",
    "category": "student",
    "description": "Helpful prompts for projects — ideas & scopes.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Projects — Ideas & Scopes: 1",
        "slug": "projects-ideas-scopes-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Ideas & Scopes with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Ideas & Scopes."
      },
      {
        "title": "Projects — Ideas & Scopes: 2",
        "slug": "projects-ideas-scopes-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 3",
        "slug": "projects-ideas-scopes-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 4",
        "slug": "projects-ideas-scopes-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 5",
        "slug": "projects-ideas-scopes-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Ideas & Scopes. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Ideas & Scopes."
      },
      {
        "title": "Projects — Ideas & Scopes: 6",
        "slug": "projects-ideas-scopes-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Ideas & Scopes assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Coding — Project Scaffolds — Pack 1",
    "category": "student",
    "description": "Helpful prompts for coding — project scaffolds.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Coding — Project Scaffolds: 1",
        "slug": "coding-project-scaffolds-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Project Scaffolds assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Coding — Project Scaffolds: 2",
        "slug": "coding-project-scaffolds-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Project Scaffolds. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Project Scaffolds."
      },
      {
        "title": "Coding — Project Scaffolds: 3",
        "slug": "coding-project-scaffolds-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 4",
        "slug": "coding-project-scaffolds-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 5",
        "slug": "coding-project-scaffolds-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 6",
        "slug": "coding-project-scaffolds-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Project Scaffolds with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Project Scaffolds including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Coding — Project Scaffolds: 7",
        "slug": "coding-project-scaffolds-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 8",
        "slug": "coding-project-scaffolds-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Project Scaffolds covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Daily Life — Budget & Time — Pack 1",
    "category": "student",
    "description": "Helpful prompts for daily life — budget & time.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Daily Life — Budget & Time: 1",
        "slug": "daily-life-budget-time-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Budget & Time. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Budget & Time."
      },
      {
        "title": "Daily Life — Budget & Time: 2",
        "slug": "daily-life-budget-time-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Budget & Time organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Daily Life — Budget & Time: 3",
        "slug": "daily-life-budget-time-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Budget & Time, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Budget & Time that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Budget & Time topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Daily Life — Budget & Time: 4",
        "slug": "daily-life-budget-time-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Budget & Time with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Budget & Time including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Daily Life — Budget & Time: 5",
        "slug": "daily-life-budget-time-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Budget & Time. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Daily Life — Budget & Time: 6",
        "slug": "daily-life-budget-time-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Budget & Time with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Budget & Time."
      },
      {
        "title": "Daily Life — Budget & Time: 7",
        "slug": "daily-life-budget-time-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Budget & Time with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Budget & Time, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Daily Life — Budget & Time: 8",
        "slug": "daily-life-budget-time-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Budget & Time assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Daily Life — Health & Meals — Pack 1",
    "category": "student",
    "description": "Helpful prompts for daily life — health & meals.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Daily Life — Health & Meals: 1",
        "slug": "daily-life-health-meals-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Health & Meals. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Health & Meals."
      },
      {
        "title": "Daily Life — Health & Meals: 2",
        "slug": "daily-life-health-meals-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Health & Meals with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Health & Meals."
      },
      {
        "title": "Daily Life — Health & Meals: 3",
        "slug": "daily-life-health-meals-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Health & Meals with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Health & Meals including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Daily Life — Health & Meals: 4",
        "slug": "daily-life-health-meals-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Health & Meals covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Daily Life — Health & Meals: 5",
        "slug": "daily-life-health-meals-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Health & Meals. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Daily Life — Health & Meals: 6",
        "slug": "daily-life-health-meals-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Health & Meals. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Daily Life — Health & Meals: 7",
        "slug": "daily-life-health-meals-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Health & Meals organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "CS — Data Structures — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — data structures.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-data-structures-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Data Structures with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Data Structures."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-data-structures-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Data Structures. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-data-structures-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Data Structures, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Data Structures that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Data Structures topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-data-structures-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Data Structures assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-data-structures-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Data Structures with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Data Structures including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-data-structures-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Data Structures. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-data-structures-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Data Structures. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Data Structures."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-data-structures-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Data Structures with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Data Structures, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "CS — Algorithms — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — algorithms.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-algorithms-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Algorithms, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Algorithms that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Algorithms topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-algorithms-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Algorithms with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Algorithms, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-algorithms-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Algorithms covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-algorithms-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Algorithms assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-algorithms-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Algorithms with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Algorithms including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-algorithms-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Algorithms with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Algorithms."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-algorithms-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Algorithms. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "CS — Operating Systems — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — operating systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "cs-operating-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Operating Systems with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Operating Systems, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-operating-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Operating Systems, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Operating Systems that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Operating Systems topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-operating-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Operating Systems organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-operating-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Operating Systems. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-operating-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Operating Systems. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-operating-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Operating Systems with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Operating Systems including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "CS — Computer Networks — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — computer networks.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "cs-computer-networks-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Computer Networks with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Computer Networks, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-computer-networks-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Computer Networks, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Computer Networks that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Computer Networks topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-computer-networks-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Computer Networks organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-computer-networks-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Computer Networks assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-computer-networks-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Computer Networks. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-computer-networks-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Computer Networks. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-computer-networks-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Computer Networks covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "CS — Databases (SQL) — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — databases (sql).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-databases-sql-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Databases (SQL) assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-databases-sql-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Databases (SQL) with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Databases (SQL), include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-databases-sql-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Databases (SQL) with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Databases (SQL) including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-databases-sql-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Databases (SQL) with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Databases (SQL)."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-databases-sql-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Databases (SQL), each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Databases (SQL) that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Databases (SQL) topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-databases-sql-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Databases (SQL) organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "CS — NoSQL & MongoDB — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — nosql & mongodb.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-nosql-mongodb-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for NoSQL & MongoDB. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-nosql-mongodb-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for NoSQL & MongoDB with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of NoSQL & MongoDB."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-nosql-mongodb-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for NoSQL & MongoDB. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-nosql-mongodb-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for NoSQL & MongoDB, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from NoSQL & MongoDB that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how NoSQL & MongoDB topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-nosql-mongodb-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for NoSQL & MongoDB organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-nosql-mongodb-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for NoSQL & MongoDB. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to NoSQL & MongoDB."
      }
    ]
  },
  {
    "name": "CS — OOP in Python — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — oop in python.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-oop-in-python-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for OOP in Python covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-oop-in-python-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for OOP in Python. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-oop-in-python-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for OOP in Python organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-oop-in-python-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for OOP in Python. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-oop-in-python-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for OOP in Python with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in OOP in Python including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-oop-in-python-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for OOP in Python, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from OOP in Python that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how OOP in Python topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-oop-in-python-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for OOP in Python assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "CS — Web Dev (MERN) — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — web dev (mern).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-web-dev-mern-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Web Dev (MERN) assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-web-dev-mern-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Web Dev (MERN) with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Web Dev (MERN), include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-web-dev-mern-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Web Dev (MERN) with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Web Dev (MERN)."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-web-dev-mern-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Web Dev (MERN). Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-web-dev-mern-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Web Dev (MERN) organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-web-dev-mern-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Web Dev (MERN). For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Web Dev (MERN)."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-web-dev-mern-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Web Dev (MERN) with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Web Dev (MERN) including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-web-dev-mern-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Web Dev (MERN). Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "CS — System Design Basics — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — system design basics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Practice Questions Bank",
        "slug": "cs-system-design-basics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for System Design Basics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in System Design Basics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-system-design-basics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for System Design Basics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-system-design-basics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for System Design Basics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-system-design-basics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for System Design Basics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from System Design Basics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how System Design Basics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-system-design-basics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for System Design Basics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in System Design Basics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-system-design-basics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for System Design Basics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of System Design Basics."
      }
    ]
  },
  {
    "name": "CS — DevOps for Beginners — Pack 2",
    "category": "student",
    "description": "Helpful prompts for cs — devops for beginners.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-devops-for-beginners-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for DevOps for Beginners. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-devops-for-beginners-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for DevOps for Beginners organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-devops-for-beginners-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for DevOps for Beginners covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-devops-for-beginners-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for DevOps for Beginners with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in DevOps for Beginners including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-devops-for-beginners-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for DevOps for Beginners with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in DevOps for Beginners, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-devops-for-beginners-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for DevOps for Beginners with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of DevOps for Beginners."
      }
    ]
  },
  {
    "name": "EE — Circuits & Signals — Pack 2",
    "category": "student",
    "description": "Helpful prompts for ee — circuits & signals.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "ee-circuits-signals-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Circuits & Signals, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Circuits & Signals that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Circuits & Signals topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "ee-circuits-signals-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Circuits & Signals organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "ee-circuits-signals-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Circuits & Signals with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Circuits & Signals."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "ee-circuits-signals-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Circuits & Signals. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Circuits & Signals."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "ee-circuits-signals-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Circuits & Signals covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "ee-circuits-signals-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Circuits & Signals with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Circuits & Signals including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "ee-circuits-signals-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Circuits & Signals. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "ee-circuits-signals-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Circuits & Signals. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "EE — Control Systems — Pack 2",
    "category": "student",
    "description": "Helpful prompts for ee — control systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "ee-control-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Control Systems covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "ee-control-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Control Systems. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "ee-control-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Control Systems with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Control Systems including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "ee-control-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Control Systems organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "ee-control-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Control Systems with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Control Systems."
      },
      {
        "title": "Structured Study Plan",
        "slug": "ee-control-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Control Systems with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Control Systems, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "ME — Thermodynamics — Pack 2",
    "category": "student",
    "description": "Helpful prompts for me — thermodynamics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Practice Questions Bank",
        "slug": "me-thermodynamics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Thermodynamics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Thermodynamics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "me-thermodynamics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Thermodynamics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Thermodynamics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Thermodynamics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "me-thermodynamics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Thermodynamics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "me-thermodynamics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Thermodynamics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Structured Study Plan",
        "slug": "me-thermodynamics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Thermodynamics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Thermodynamics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "me-thermodynamics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Thermodynamics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  },
  {
    "name": "ME — Strength of Materials — Pack 2",
    "category": "student",
    "description": "Helpful prompts for me — strength of materials.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "me-strength-of-materials-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Strength of Materials. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "me-strength-of-materials-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Strength of Materials, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Strength of Materials that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Strength of Materials topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "me-strength-of-materials-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Strength of Materials organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "me-strength-of-materials-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Strength of Materials. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Structured Study Plan",
        "slug": "me-strength-of-materials-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Strength of Materials with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Strength of Materials, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "me-strength-of-materials-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Strength of Materials covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "me-strength-of-materials-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Strength of Materials. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Strength of Materials."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "me-strength-of-materials-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Strength of Materials with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Strength of Materials."
      }
    ]
  },
  {
    "name": "Civil — Structural Basics — Pack 2",
    "category": "student",
    "description": "Helpful prompts for civil — structural basics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "civil-structural-basics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Structural Basics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "civil-structural-basics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Structural Basics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Structural Basics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Structural Basics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Structured Study Plan",
        "slug": "civil-structural-basics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Structural Basics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Structural Basics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "civil-structural-basics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Structural Basics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "civil-structural-basics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Structural Basics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Structural Basics."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "civil-structural-basics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Structural Basics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "civil-structural-basics-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Structural Basics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "civil-structural-basics-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Structural Basics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Structural Basics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Civil — Surveying & GIS — Pack 2",
    "category": "student",
    "description": "Helpful prompts for civil — surveying & gis.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "civil-surveying-gis-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Surveying & GIS assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "civil-surveying-gis-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Surveying & GIS with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Surveying & GIS, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "civil-surveying-gis-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Surveying & GIS with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Surveying & GIS including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "civil-surveying-gis-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Surveying & GIS. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "civil-surveying-gis-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Surveying & GIS, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Surveying & GIS that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Surveying & GIS topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "civil-surveying-gis-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Surveying & GIS. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "civil-surveying-gis-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Surveying & GIS organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "civil-surveying-gis-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Surveying & GIS covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Math — Calculus — Pack 2",
    "category": "student",
    "description": "Helpful prompts for math — calculus.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Learning Resources Guide",
        "slug": "math-calculus-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Calculus organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-calculus-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Calculus with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Calculus."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-calculus-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Calculus assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-calculus-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Calculus with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Calculus including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-calculus-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Calculus. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-calculus-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Calculus. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-calculus-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Calculus, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Calculus that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Calculus topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "math-calculus-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Calculus. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Calculus."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-calculus-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Calculus with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Calculus, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "Math — Linear Algebra — Pack 2",
    "category": "student",
    "description": "Helpful prompts for math — linear algebra.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview & Viva Questions",
        "slug": "math-linear-algebra-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Linear Algebra. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Linear Algebra."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-linear-algebra-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Linear Algebra. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "math-linear-algebra-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Linear Algebra organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-linear-algebra-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Linear Algebra with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Linear Algebra including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-linear-algebra-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Linear Algebra assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-linear-algebra-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Linear Algebra. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-linear-algebra-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Linear Algebra with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Linear Algebra, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "Math — Probability & Stats — Pack 2",
    "category": "student",
    "description": "Helpful prompts for math — probability & stats.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-probability-stats-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Probability & Stats with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Probability & Stats."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "math-probability-stats-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Probability & Stats. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Probability & Stats."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-probability-stats-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Probability & Stats, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Probability & Stats that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Probability & Stats topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-probability-stats-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Probability & Stats with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Probability & Stats including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-probability-stats-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Probability & Stats with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Probability & Stats, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-probability-stats-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Probability & Stats. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "math-probability-stats-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Probability & Stats covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-probability-stats-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Probability & Stats. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-probability-stats-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Probability & Stats assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Physics — Core — Pack 2",
    "category": "student",
    "description": "Helpful prompts for physics — core.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "physics-core-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Core with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Core, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "physics-core-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Core. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "physics-core-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Core. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Core."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "physics-core-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Core, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Core that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Core topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "physics-core-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Core covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "physics-core-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Core organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "physics-core-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Core assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "physics-core-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Core. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "physics-core-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Core with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Core."
      }
    ]
  },
  {
    "name": "Commerce — Accounting — Pack 2",
    "category": "student",
    "description": "Helpful prompts for commerce — accounting.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-accounting-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Accounting, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Accounting that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Accounting topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-accounting-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Accounting organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-accounting-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Accounting covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-accounting-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Accounting with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Accounting, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-accounting-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Accounting. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-accounting-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Accounting assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-accounting-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Accounting with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Accounting."
      }
    ]
  },
  {
    "name": "Commerce — Corporate Finance — Pack 2",
    "category": "student",
    "description": "Helpful prompts for commerce — corporate finance.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-corporate-finance-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Corporate Finance, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Corporate Finance that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Corporate Finance topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-corporate-finance-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Corporate Finance covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-corporate-finance-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Corporate Finance with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Corporate Finance, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-corporate-finance-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Corporate Finance assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-corporate-finance-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Corporate Finance. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-corporate-finance-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Corporate Finance organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-corporate-finance-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Corporate Finance with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Corporate Finance."
      }
    ]
  },
  {
    "name": "Commerce — Marketing — Pack 2",
    "category": "student",
    "description": "Helpful prompts for commerce — marketing.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-marketing-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Marketing organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-marketing-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Marketing with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Marketing."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-marketing-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Marketing with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Marketing including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-marketing-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Marketing. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-marketing-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Marketing. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Marketing."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-marketing-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Marketing assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Commerce — Operations & SCM — Pack 2",
    "category": "student",
    "description": "Helpful prompts for commerce — operations & scm.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-operations-scm-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Operations & SCM. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-operations-scm-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Operations & SCM organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-operations-scm-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Operations & SCM covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-operations-scm-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Operations & SCM with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Operations & SCM."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-operations-scm-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Operations & SCM. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-operations-scm-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Operations & SCM, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Operations & SCM that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Operations & SCM topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-operations-scm-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Operations & SCM assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-operations-scm-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Operations & SCM. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Operations & SCM."
      }
    ]
  },
  {
    "name": "Commerce — Business Law — Pack 2",
    "category": "student",
    "description": "Helpful prompts for commerce — business law.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-business-law-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Business Law assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-business-law-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Business Law covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-business-law-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Business Law with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Business Law including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-business-law-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Business Law. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-business-law-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Business Law with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Business Law, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-business-law-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Business Law organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-business-law-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Business Law. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "Commerce — Economics — Pack 2",
    "category": "student",
    "description": "Helpful prompts for commerce — economics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-economics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Economics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-economics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Economics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Economics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Economics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-economics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Economics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Economics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-economics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Economics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Economics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-economics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Economics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Economics."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-economics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Economics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-economics-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Economics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-economics-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Economics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "Study Skills — Spaced Repetition — Pack 2",
    "category": "student",
    "description": "Helpful prompts for study skills — spaced repetition.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Study Skills — Spaced Repetition: 1",
        "slug": "study-skills-spaced-repetition-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Spaced Repetition covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Study Skills — Spaced Repetition: 2",
        "slug": "study-skills-spaced-repetition-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Spaced Repetition organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Study Skills — Spaced Repetition: 3",
        "slug": "study-skills-spaced-repetition-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Spaced Repetition. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Spaced Repetition."
      },
      {
        "title": "Study Skills — Spaced Repetition: 4",
        "slug": "study-skills-spaced-repetition-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Spaced Repetition with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Spaced Repetition including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Study Skills — Spaced Repetition: 5",
        "slug": "study-skills-spaced-repetition-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Spaced Repetition, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Spaced Repetition that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Spaced Repetition topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Study Skills — Spaced Repetition: 6",
        "slug": "study-skills-spaced-repetition-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Spaced Repetition assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Study Skills — Spaced Repetition: 7",
        "slug": "study-skills-spaced-repetition-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Spaced Repetition. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Study Skills — Spaced Repetition: 8",
        "slug": "study-skills-spaced-repetition-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Spaced Repetition with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Spaced Repetition."
      },
      {
        "title": "Study Skills — Spaced Repetition: 9",
        "slug": "study-skills-spaced-repetition-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Spaced Repetition. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  },
  {
    "name": "Study Skills — Exam Strategy — Pack 2",
    "category": "student",
    "description": "Helpful prompts for study skills — exam strategy.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Study Skills — Exam Strategy: 1",
        "slug": "study-skills-exam-strategy-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Exam Strategy. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Study Skills — Exam Strategy: 2",
        "slug": "study-skills-exam-strategy-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Exam Strategy. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Study Skills — Exam Strategy: 3",
        "slug": "study-skills-exam-strategy-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Exam Strategy assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Study Skills — Exam Strategy: 4",
        "slug": "study-skills-exam-strategy-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Exam Strategy covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Study Skills — Exam Strategy: 5",
        "slug": "study-skills-exam-strategy-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Exam Strategy organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Study Skills — Exam Strategy: 6",
        "slug": "study-skills-exam-strategy-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Exam Strategy with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Exam Strategy, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Study Skills — Exam Strategy: 7",
        "slug": "study-skills-exam-strategy-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Exam Strategy with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Exam Strategy including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Writing — Reports & Thesis — Pack 2",
    "category": "student",
    "description": "Helpful prompts for writing — reports & thesis.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Writing — Reports & Thesis: 1",
        "slug": "writing-reports-thesis-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Reports & Thesis. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Writing — Reports & Thesis: 2",
        "slug": "writing-reports-thesis-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Reports & Thesis assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Writing — Reports & Thesis: 3",
        "slug": "writing-reports-thesis-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Reports & Thesis with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Reports & Thesis including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Writing — Reports & Thesis: 4",
        "slug": "writing-reports-thesis-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Reports & Thesis. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Writing — Reports & Thesis: 5",
        "slug": "writing-reports-thesis-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Reports & Thesis with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Reports & Thesis, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Writing — Reports & Thesis: 6",
        "slug": "writing-reports-thesis-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Reports & Thesis with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Reports & Thesis."
      },
      {
        "title": "Writing — Reports & Thesis: 7",
        "slug": "writing-reports-thesis-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Reports & Thesis organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Writing — Reports & Thesis: 8",
        "slug": "writing-reports-thesis-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Reports & Thesis. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Reports & Thesis."
      },
      {
        "title": "Writing — Reports & Thesis: 9",
        "slug": "writing-reports-thesis-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Reports & Thesis, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Reports & Thesis that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Reports & Thesis topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Presentation — Slides & Delivery — Pack 2",
    "category": "student",
    "description": "Helpful prompts for presentation — slides & delivery.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Presentation — Slides & Delivery: 1",
        "slug": "presentation-slides-delivery-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Slides & Delivery covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Presentation — Slides & Delivery: 2",
        "slug": "presentation-slides-delivery-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Slides & Delivery organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Presentation — Slides & Delivery: 3",
        "slug": "presentation-slides-delivery-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Slides & Delivery with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Slides & Delivery, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Presentation — Slides & Delivery: 4",
        "slug": "presentation-slides-delivery-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Slides & Delivery. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Slides & Delivery."
      },
      {
        "title": "Presentation — Slides & Delivery: 5",
        "slug": "presentation-slides-delivery-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Slides & Delivery with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Slides & Delivery."
      },
      {
        "title": "Presentation — Slides & Delivery: 6",
        "slug": "presentation-slides-delivery-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Slides & Delivery. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "Career — Resume & Portfolio — Pack 2",
    "category": "student",
    "description": "Helpful prompts for career — resume & portfolio.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Career — Resume & Portfolio: 1",
        "slug": "career-resume-portfolio-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Resume & Portfolio with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Resume & Portfolio."
      },
      {
        "title": "Career — Resume & Portfolio: 2",
        "slug": "career-resume-portfolio-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Resume & Portfolio organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Career — Resume & Portfolio: 3",
        "slug": "career-resume-portfolio-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Resume & Portfolio, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Resume & Portfolio that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Resume & Portfolio topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Career — Resume & Portfolio: 4",
        "slug": "career-resume-portfolio-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Resume & Portfolio with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Resume & Portfolio including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Career — Resume & Portfolio: 5",
        "slug": "career-resume-portfolio-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Resume & Portfolio covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Career — Resume & Portfolio: 6",
        "slug": "career-resume-portfolio-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Resume & Portfolio. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Career — Resume & Portfolio: 7",
        "slug": "career-resume-portfolio-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Resume & Portfolio with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Resume & Portfolio, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "Career — Interview Drills — Pack 2",
    "category": "student",
    "description": "Helpful prompts for career — interview drills.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Career — Interview Drills: 1",
        "slug": "career-interview-drills-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 2",
        "slug": "career-interview-drills-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 3",
        "slug": "career-interview-drills-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 4",
        "slug": "career-interview-drills-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 5",
        "slug": "career-interview-drills-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 6",
        "slug": "career-interview-drills-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 7",
        "slug": "career-interview-drills-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 8",
        "slug": "career-interview-drills-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      }
    ]
  },
  {
    "name": "Projects — Ideas & Scopes — Pack 2",
    "category": "student",
    "description": "Helpful prompts for projects — ideas & scopes.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Projects — Ideas & Scopes: 1",
        "slug": "projects-ideas-scopes-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 2",
        "slug": "projects-ideas-scopes-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 3",
        "slug": "projects-ideas-scopes-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Ideas & Scopes assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Projects — Ideas & Scopes: 4",
        "slug": "projects-ideas-scopes-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Ideas & Scopes. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Ideas & Scopes."
      },
      {
        "title": "Projects — Ideas & Scopes: 5",
        "slug": "projects-ideas-scopes-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 6",
        "slug": "projects-ideas-scopes-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Coding — Project Scaffolds — Pack 2",
    "category": "student",
    "description": "Helpful prompts for coding — project scaffolds.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Coding — Project Scaffolds: 1",
        "slug": "coding-project-scaffolds-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Project Scaffolds with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Project Scaffolds."
      },
      {
        "title": "Coding — Project Scaffolds: 2",
        "slug": "coding-project-scaffolds-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 3",
        "slug": "coding-project-scaffolds-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Project Scaffolds with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Project Scaffolds including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Coding — Project Scaffolds: 4",
        "slug": "coding-project-scaffolds-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Project Scaffolds. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Project Scaffolds."
      },
      {
        "title": "Coding — Project Scaffolds: 5",
        "slug": "coding-project-scaffolds-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Project Scaffolds covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Coding — Project Scaffolds: 6",
        "slug": "coding-project-scaffolds-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Daily Life — Budget & Time — Pack 2",
    "category": "student",
    "description": "Helpful prompts for daily life — budget & time.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Daily Life — Budget & Time: 1",
        "slug": "daily-life-budget-time-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Budget & Time. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Budget & Time."
      },
      {
        "title": "Daily Life — Budget & Time: 2",
        "slug": "daily-life-budget-time-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Budget & Time with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Budget & Time, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Daily Life — Budget & Time: 3",
        "slug": "daily-life-budget-time-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Budget & Time, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Budget & Time that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Budget & Time topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Daily Life — Budget & Time: 4",
        "slug": "daily-life-budget-time-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Budget & Time with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Budget & Time including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Daily Life — Budget & Time: 5",
        "slug": "daily-life-budget-time-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Budget & Time. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Daily Life — Budget & Time: 6",
        "slug": "daily-life-budget-time-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Budget & Time. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "Daily Life — Health & Meals — Pack 2",
    "category": "student",
    "description": "Helpful prompts for daily life — health & meals.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Daily Life — Health & Meals: 1",
        "slug": "daily-life-health-meals-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Health & Meals. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Daily Life — Health & Meals: 2",
        "slug": "daily-life-health-meals-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Health & Meals covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Daily Life — Health & Meals: 3",
        "slug": "daily-life-health-meals-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Health & Meals. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Daily Life — Health & Meals: 4",
        "slug": "daily-life-health-meals-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Health & Meals, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Health & Meals that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Health & Meals topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Daily Life — Health & Meals: 5",
        "slug": "daily-life-health-meals-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Health & Meals. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Health & Meals."
      },
      {
        "title": "Daily Life — Health & Meals: 6",
        "slug": "daily-life-health-meals-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Health & Meals with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Health & Meals."
      },
      {
        "title": "Daily Life — Health & Meals: 7",
        "slug": "daily-life-health-meals-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Health & Meals organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "CS — Data Structures — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — data structures.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-data-structures-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Data Structures with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Data Structures."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-data-structures-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Data Structures. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-data-structures-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Data Structures. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-data-structures-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Data Structures organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-data-structures-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Data Structures, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Data Structures that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Data Structures topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-data-structures-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Data Structures assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-data-structures-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Data Structures. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Data Structures."
      }
    ]
  },
  {
    "name": "CS — Algorithms — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — algorithms.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-algorithms-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Algorithms, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Algorithms that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Algorithms topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-algorithms-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Algorithms organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-algorithms-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Algorithms assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-algorithms-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Algorithms. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Algorithms."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-algorithms-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Algorithms with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Algorithms, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-algorithms-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Algorithms. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-algorithms-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Algorithms with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Algorithms including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-algorithms-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Algorithms covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-algorithms-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Algorithms. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  },
  {
    "name": "CS — Operating Systems — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — operating systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Learning Resources Guide",
        "slug": "cs-operating-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Operating Systems organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-operating-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Operating Systems. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Operating Systems."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-operating-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Operating Systems, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Operating Systems that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Operating Systems topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-operating-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Operating Systems covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-operating-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Operating Systems. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-operating-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Operating Systems with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Operating Systems including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "CS — Computer Networks — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — computer networks.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-computer-networks-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Computer Networks, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Computer Networks that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Computer Networks topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-computer-networks-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Computer Networks. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-computer-networks-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Computer Networks. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-computer-networks-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Computer Networks organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-computer-networks-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Computer Networks covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-computer-networks-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Computer Networks with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Computer Networks, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-computer-networks-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Computer Networks with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Computer Networks."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-computer-networks-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Computer Networks. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Computer Networks."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-computer-networks-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Computer Networks with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Computer Networks including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "CS — Databases (SQL) — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — databases (sql).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-databases-sql-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Databases (SQL), each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Databases (SQL) that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Databases (SQL) topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-databases-sql-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Databases (SQL) with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Databases (SQL), include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-databases-sql-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Databases (SQL). Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-databases-sql-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Databases (SQL) with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Databases (SQL) including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-databases-sql-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Databases (SQL) covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-databases-sql-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Databases (SQL) assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-databases-sql-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Databases (SQL). For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Databases (SQL)."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-databases-sql-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Databases (SQL) organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "CS — NoSQL & MongoDB — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — nosql & mongodb.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-nosql-mongodb-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for NoSQL & MongoDB, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from NoSQL & MongoDB that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how NoSQL & MongoDB topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-nosql-mongodb-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for NoSQL & MongoDB. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-nosql-mongodb-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for NoSQL & MongoDB. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to NoSQL & MongoDB."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-nosql-mongodb-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for NoSQL & MongoDB with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of NoSQL & MongoDB."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-nosql-mongodb-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for NoSQL & MongoDB organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-nosql-mongodb-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for NoSQL & MongoDB. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-nosql-mongodb-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for NoSQL & MongoDB with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in NoSQL & MongoDB including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-nosql-mongodb-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for NoSQL & MongoDB covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-nosql-mongodb-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for NoSQL & MongoDB with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in NoSQL & MongoDB, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "CS — OOP in Python — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — oop in python.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "cs-oop-in-python-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for OOP in Python with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in OOP in Python, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-oop-in-python-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for OOP in Python, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from OOP in Python that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how OOP in Python topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-oop-in-python-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for OOP in Python organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-oop-in-python-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for OOP in Python assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-oop-in-python-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for OOP in Python covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-oop-in-python-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for OOP in Python with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in OOP in Python including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "CS — Web Dev (MERN) — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — web dev (mern).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-web-dev-mern-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Web Dev (MERN) with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Web Dev (MERN)."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-web-dev-mern-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Web Dev (MERN), each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Web Dev (MERN) that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Web Dev (MERN) topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-web-dev-mern-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Web Dev (MERN). For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Web Dev (MERN)."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-web-dev-mern-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Web Dev (MERN) organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-web-dev-mern-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Web Dev (MERN). Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-web-dev-mern-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Web Dev (MERN) assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-web-dev-mern-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Web Dev (MERN) covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "CS — System Design Basics — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — system design basics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-system-design-basics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for System Design Basics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-system-design-basics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for System Design Basics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to System Design Basics."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-system-design-basics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for System Design Basics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from System Design Basics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how System Design Basics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-system-design-basics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for System Design Basics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-system-design-basics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for System Design Basics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of System Design Basics."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-system-design-basics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for System Design Basics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in System Design Basics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-system-design-basics-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for System Design Basics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "CS — DevOps for Beginners — Pack 3",
    "category": "student",
    "description": "Helpful prompts for cs — devops for beginners.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-devops-for-beginners-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for DevOps for Beginners. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to DevOps for Beginners."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-devops-for-beginners-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for DevOps for Beginners with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of DevOps for Beginners."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-devops-for-beginners-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for DevOps for Beginners organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-devops-for-beginners-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for DevOps for Beginners with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in DevOps for Beginners, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-devops-for-beginners-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for DevOps for Beginners covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-devops-for-beginners-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for DevOps for Beginners assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-devops-for-beginners-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for DevOps for Beginners. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-devops-for-beginners-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for DevOps for Beginners with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in DevOps for Beginners including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "EE — Circuits & Signals — Pack 3",
    "category": "student",
    "description": "Helpful prompts for ee — circuits & signals.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "ee-circuits-signals-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Circuits & Signals with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Circuits & Signals."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "ee-circuits-signals-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Circuits & Signals. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Structured Study Plan",
        "slug": "ee-circuits-signals-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Circuits & Signals with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Circuits & Signals, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "ee-circuits-signals-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Circuits & Signals with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Circuits & Signals including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "ee-circuits-signals-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Circuits & Signals, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Circuits & Signals that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Circuits & Signals topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "ee-circuits-signals-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Circuits & Signals organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "ee-circuits-signals-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Circuits & Signals. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "ee-circuits-signals-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Circuits & Signals assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "EE — Control Systems — Pack 3",
    "category": "student",
    "description": "Helpful prompts for ee — control systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "ee-control-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Control Systems assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "ee-control-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Control Systems. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "ee-control-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Control Systems. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Control Systems."
      },
      {
        "title": "Structured Study Plan",
        "slug": "ee-control-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Control Systems with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Control Systems, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "ee-control-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Control Systems organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "ee-control-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Control Systems with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Control Systems."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "ee-control-systems-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Control Systems. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "ee-control-systems-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Control Systems covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "ME — Thermodynamics — Pack 3",
    "category": "student",
    "description": "Helpful prompts for me — thermodynamics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "me-thermodynamics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Thermodynamics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "me-thermodynamics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Thermodynamics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "me-thermodynamics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Thermodynamics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Thermodynamics."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "me-thermodynamics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Thermodynamics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Thermodynamics."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "me-thermodynamics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Thermodynamics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "me-thermodynamics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Thermodynamics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Thermodynamics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "me-thermodynamics-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Thermodynamics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Structured Study Plan",
        "slug": "me-thermodynamics-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Thermodynamics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Thermodynamics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "ME — Strength of Materials — Pack 3",
    "category": "student",
    "description": "Helpful prompts for me — strength of materials.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "me-strength-of-materials-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Strength of Materials with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Strength of Materials, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "me-strength-of-materials-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Strength of Materials assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "me-strength-of-materials-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Strength of Materials, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Strength of Materials that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Strength of Materials topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "me-strength-of-materials-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Strength of Materials. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "me-strength-of-materials-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Strength of Materials covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "me-strength-of-materials-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Strength of Materials. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Strength of Materials."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "me-strength-of-materials-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Strength of Materials with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Strength of Materials."
      }
    ]
  },
  {
    "name": "Civil — Structural Basics — Pack 3",
    "category": "student",
    "description": "Helpful prompts for civil — structural basics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "civil-structural-basics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Structural Basics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "civil-structural-basics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Structural Basics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "civil-structural-basics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Structural Basics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Structural Basics."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "civil-structural-basics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Structural Basics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "civil-structural-basics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Structural Basics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "civil-structural-basics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Structural Basics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Structural Basics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Structural Basics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "civil-structural-basics-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Structural Basics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "Civil — Surveying & GIS — Pack 3",
    "category": "student",
    "description": "Helpful prompts for civil — surveying & gis.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "civil-surveying-gis-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Surveying & GIS. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "civil-surveying-gis-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Surveying & GIS with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Surveying & GIS."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "civil-surveying-gis-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Surveying & GIS organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "civil-surveying-gis-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Surveying & GIS, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Surveying & GIS that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Surveying & GIS topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "civil-surveying-gis-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Surveying & GIS. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "civil-surveying-gis-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Surveying & GIS with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Surveying & GIS including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "civil-surveying-gis-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Surveying & GIS with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Surveying & GIS, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "Math — Calculus — Pack 3",
    "category": "student",
    "description": "Helpful prompts for math — calculus.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-calculus-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Calculus. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "math-calculus-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Calculus organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "math-calculus-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Calculus covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-calculus-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Calculus with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Calculus."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-calculus-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Calculus with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Calculus including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-calculus-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Calculus with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Calculus, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "math-calculus-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Calculus. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Calculus."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-calculus-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Calculus assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Math — Linear Algebra — Pack 3",
    "category": "student",
    "description": "Helpful prompts for math — linear algebra.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "math-linear-algebra-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Linear Algebra with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Linear Algebra, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-linear-algebra-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Linear Algebra. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-linear-algebra-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Linear Algebra, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Linear Algebra that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Linear Algebra topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-linear-algebra-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Linear Algebra with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Linear Algebra."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-linear-algebra-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Linear Algebra assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-linear-algebra-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Linear Algebra. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "math-linear-algebra-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Linear Algebra. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Linear Algebra."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-linear-algebra-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Linear Algebra with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Linear Algebra including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Math — Probability & Stats — Pack 3",
    "category": "student",
    "description": "Helpful prompts for math — probability & stats.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-probability-stats-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Probability & Stats assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-probability-stats-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Probability & Stats with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Probability & Stats, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "math-probability-stats-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Probability & Stats covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-probability-stats-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Probability & Stats. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-probability-stats-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Probability & Stats with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Probability & Stats including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-probability-stats-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Probability & Stats with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Probability & Stats."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-probability-stats-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Probability & Stats, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Probability & Stats that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Probability & Stats topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Physics — Core — Pack 3",
    "category": "student",
    "description": "Helpful prompts for physics — core.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "physics-core-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Core with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Core."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "physics-core-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Core covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "physics-core-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Core. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "physics-core-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Core, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Core that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Core topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "physics-core-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Core assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "physics-core-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Core. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Core."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "physics-core-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Core with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Core including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Commerce — Accounting — Pack 3",
    "category": "student",
    "description": "Helpful prompts for commerce — accounting.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-accounting-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Accounting assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-accounting-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Accounting with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Accounting, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-accounting-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Accounting, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Accounting that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Accounting topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-accounting-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Accounting. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-accounting-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Accounting with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Accounting."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-accounting-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Accounting. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Accounting."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-accounting-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Accounting with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Accounting including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Commerce — Corporate Finance — Pack 3",
    "category": "student",
    "description": "Helpful prompts for commerce — corporate finance.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-corporate-finance-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Corporate Finance with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Corporate Finance."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-corporate-finance-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Corporate Finance with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Corporate Finance, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-corporate-finance-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Corporate Finance with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Corporate Finance including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-corporate-finance-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Corporate Finance covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-corporate-finance-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Corporate Finance organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-corporate-finance-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Corporate Finance assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-corporate-finance-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Corporate Finance. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Corporate Finance."
      }
    ]
  },
  {
    "name": "Commerce — Marketing — Pack 3",
    "category": "student",
    "description": "Helpful prompts for commerce — marketing.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-marketing-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Marketing with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Marketing including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-marketing-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Marketing, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Marketing that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Marketing topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-marketing-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Marketing with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Marketing, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-marketing-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Marketing with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Marketing."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-marketing-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Marketing. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Marketing."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-marketing-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Marketing. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "Commerce — Operations & SCM — Pack 3",
    "category": "student",
    "description": "Helpful prompts for commerce — operations & scm.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-operations-scm-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Operations & SCM with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Operations & SCM."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-operations-scm-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Operations & SCM organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-operations-scm-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Operations & SCM covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-operations-scm-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Operations & SCM. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-operations-scm-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Operations & SCM with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Operations & SCM including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-operations-scm-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Operations & SCM, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Operations & SCM that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Operations & SCM topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Commerce — Business Law — Pack 3",
    "category": "student",
    "description": "Helpful prompts for commerce — business law.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-business-law-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Business Law organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-business-law-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Business Law covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-business-law-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Business Law. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-business-law-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Business Law, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Business Law that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Business Law topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-business-law-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Business Law with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Business Law, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-business-law-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Business Law. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  },
  {
    "name": "Commerce — Economics — Pack 3",
    "category": "student",
    "description": "Helpful prompts for commerce — economics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-economics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Economics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-economics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Economics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Economics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-economics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Economics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-economics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Economics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-economics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Economics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-economics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Economics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Economics."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-economics-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Economics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-economics-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Economics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Economics."
      }
    ]
  },
  {
    "name": "Study Skills — Spaced Repetition — Pack 3",
    "category": "student",
    "description": "Helpful prompts for study skills — spaced repetition.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Study Skills — Spaced Repetition: 1",
        "slug": "study-skills-spaced-repetition-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Spaced Repetition with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Spaced Repetition."
      },
      {
        "title": "Study Skills — Spaced Repetition: 2",
        "slug": "study-skills-spaced-repetition-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Spaced Repetition assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Study Skills — Spaced Repetition: 3",
        "slug": "study-skills-spaced-repetition-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Spaced Repetition. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Spaced Repetition."
      },
      {
        "title": "Study Skills — Spaced Repetition: 4",
        "slug": "study-skills-spaced-repetition-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Spaced Repetition, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Spaced Repetition that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Spaced Repetition topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Study Skills — Spaced Repetition: 5",
        "slug": "study-skills-spaced-repetition-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Spaced Repetition covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Study Skills — Spaced Repetition: 6",
        "slug": "study-skills-spaced-repetition-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Spaced Repetition with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Spaced Repetition, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Study Skills — Spaced Repetition: 7",
        "slug": "study-skills-spaced-repetition-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Spaced Repetition organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Study Skills — Spaced Repetition: 8",
        "slug": "study-skills-spaced-repetition-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Spaced Repetition. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Study Skills — Spaced Repetition: 9",
        "slug": "study-skills-spaced-repetition-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Spaced Repetition with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Spaced Repetition including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Study Skills — Exam Strategy — Pack 3",
    "category": "student",
    "description": "Helpful prompts for study skills — exam strategy.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Study Skills — Exam Strategy: 1",
        "slug": "study-skills-exam-strategy-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Exam Strategy assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Study Skills — Exam Strategy: 2",
        "slug": "study-skills-exam-strategy-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Exam Strategy covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Study Skills — Exam Strategy: 3",
        "slug": "study-skills-exam-strategy-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Exam Strategy, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Exam Strategy that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Exam Strategy topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Study Skills — Exam Strategy: 4",
        "slug": "study-skills-exam-strategy-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Exam Strategy. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Study Skills — Exam Strategy: 5",
        "slug": "study-skills-exam-strategy-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Exam Strategy organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Study Skills — Exam Strategy: 6",
        "slug": "study-skills-exam-strategy-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Exam Strategy. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Exam Strategy."
      },
      {
        "title": "Study Skills — Exam Strategy: 7",
        "slug": "study-skills-exam-strategy-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Exam Strategy. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Study Skills — Exam Strategy: 8",
        "slug": "study-skills-exam-strategy-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Exam Strategy with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Exam Strategy, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Study Skills — Exam Strategy: 9",
        "slug": "study-skills-exam-strategy-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Exam Strategy with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Exam Strategy including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Writing — Reports & Thesis — Pack 3",
    "category": "student",
    "description": "Helpful prompts for writing — reports & thesis.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Writing — Reports & Thesis: 1",
        "slug": "writing-reports-thesis-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Reports & Thesis. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Writing — Reports & Thesis: 2",
        "slug": "writing-reports-thesis-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Reports & Thesis organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Writing — Reports & Thesis: 3",
        "slug": "writing-reports-thesis-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Reports & Thesis. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Writing — Reports & Thesis: 4",
        "slug": "writing-reports-thesis-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Reports & Thesis covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Writing — Reports & Thesis: 5",
        "slug": "writing-reports-thesis-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Reports & Thesis with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Reports & Thesis including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Writing — Reports & Thesis: 6",
        "slug": "writing-reports-thesis-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Reports & Thesis assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Writing — Reports & Thesis: 7",
        "slug": "writing-reports-thesis-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Reports & Thesis, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Reports & Thesis that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Reports & Thesis topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Presentation — Slides & Delivery — Pack 3",
    "category": "student",
    "description": "Helpful prompts for presentation — slides & delivery.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Presentation — Slides & Delivery: 1",
        "slug": "presentation-slides-delivery-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Slides & Delivery with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Slides & Delivery."
      },
      {
        "title": "Presentation — Slides & Delivery: 2",
        "slug": "presentation-slides-delivery-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Slides & Delivery. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Slides & Delivery."
      },
      {
        "title": "Presentation — Slides & Delivery: 3",
        "slug": "presentation-slides-delivery-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Slides & Delivery. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Presentation — Slides & Delivery: 4",
        "slug": "presentation-slides-delivery-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Slides & Delivery with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Slides & Delivery including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Presentation — Slides & Delivery: 5",
        "slug": "presentation-slides-delivery-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Slides & Delivery covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Presentation — Slides & Delivery: 6",
        "slug": "presentation-slides-delivery-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Slides & Delivery organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Presentation — Slides & Delivery: 7",
        "slug": "presentation-slides-delivery-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Slides & Delivery, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Slides & Delivery that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Slides & Delivery topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Presentation — Slides & Delivery: 8",
        "slug": "presentation-slides-delivery-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Slides & Delivery with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Slides & Delivery, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Presentation — Slides & Delivery: 9",
        "slug": "presentation-slides-delivery-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Slides & Delivery assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Career — Resume & Portfolio — Pack 3",
    "category": "student",
    "description": "Helpful prompts for career — resume & portfolio.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Career — Resume & Portfolio: 1",
        "slug": "career-resume-portfolio-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Resume & Portfolio with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Resume & Portfolio."
      },
      {
        "title": "Career — Resume & Portfolio: 2",
        "slug": "career-resume-portfolio-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Resume & Portfolio assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Career — Resume & Portfolio: 3",
        "slug": "career-resume-portfolio-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Resume & Portfolio covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Career — Resume & Portfolio: 4",
        "slug": "career-resume-portfolio-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Resume & Portfolio. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Career — Resume & Portfolio: 5",
        "slug": "career-resume-portfolio-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Resume & Portfolio with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Resume & Portfolio, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Career — Resume & Portfolio: 6",
        "slug": "career-resume-portfolio-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Resume & Portfolio with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Resume & Portfolio including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Career — Interview Drills — Pack 3",
    "category": "student",
    "description": "Helpful prompts for career — interview drills.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Career — Interview Drills: 1",
        "slug": "career-interview-drills-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 2",
        "slug": "career-interview-drills-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 3",
        "slug": "career-interview-drills-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 4",
        "slug": "career-interview-drills-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 5",
        "slug": "career-interview-drills-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 6",
        "slug": "career-interview-drills-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 7",
        "slug": "career-interview-drills-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      }
    ]
  },
  {
    "name": "Projects — Ideas & Scopes — Pack 3",
    "category": "student",
    "description": "Helpful prompts for projects — ideas & scopes.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Projects — Ideas & Scopes: 1",
        "slug": "projects-ideas-scopes-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 2",
        "slug": "projects-ideas-scopes-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 3",
        "slug": "projects-ideas-scopes-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Ideas & Scopes covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Projects — Ideas & Scopes: 4",
        "slug": "projects-ideas-scopes-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Ideas & Scopes with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Ideas & Scopes including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Projects — Ideas & Scopes: 5",
        "slug": "projects-ideas-scopes-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Ideas & Scopes assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Projects — Ideas & Scopes: 6",
        "slug": "projects-ideas-scopes-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 7",
        "slug": "projects-ideas-scopes-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Ideas & Scopes with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Ideas & Scopes."
      },
      {
        "title": "Projects — Ideas & Scopes: 8",
        "slug": "projects-ideas-scopes-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Ideas & Scopes. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Ideas & Scopes."
      },
      {
        "title": "Projects — Ideas & Scopes: 9",
        "slug": "projects-ideas-scopes-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Coding — Project Scaffolds — Pack 3",
    "category": "student",
    "description": "Helpful prompts for coding — project scaffolds.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Coding — Project Scaffolds: 1",
        "slug": "coding-project-scaffolds-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Project Scaffolds with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Project Scaffolds."
      },
      {
        "title": "Coding — Project Scaffolds: 2",
        "slug": "coding-project-scaffolds-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Project Scaffolds. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Project Scaffolds."
      },
      {
        "title": "Coding — Project Scaffolds: 3",
        "slug": "coding-project-scaffolds-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Project Scaffolds covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Coding — Project Scaffolds: 4",
        "slug": "coding-project-scaffolds-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 5",
        "slug": "coding-project-scaffolds-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Project Scaffolds with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Project Scaffolds including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Coding — Project Scaffolds: 6",
        "slug": "coding-project-scaffolds-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 7",
        "slug": "coding-project-scaffolds-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Project Scaffolds assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Daily Life — Budget & Time — Pack 3",
    "category": "student",
    "description": "Helpful prompts for daily life — budget & time.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Daily Life — Budget & Time: 1",
        "slug": "daily-life-budget-time-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Budget & Time covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Daily Life — Budget & Time: 2",
        "slug": "daily-life-budget-time-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Budget & Time assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Daily Life — Budget & Time: 3",
        "slug": "daily-life-budget-time-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Budget & Time with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Budget & Time, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Daily Life — Budget & Time: 4",
        "slug": "daily-life-budget-time-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Budget & Time, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Budget & Time that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Budget & Time topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Daily Life — Budget & Time: 5",
        "slug": "daily-life-budget-time-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Budget & Time. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Budget & Time."
      },
      {
        "title": "Daily Life — Budget & Time: 6",
        "slug": "daily-life-budget-time-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Budget & Time with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Budget & Time including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Daily Life — Budget & Time: 7",
        "slug": "daily-life-budget-time-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Budget & Time organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Daily Life — Budget & Time: 8",
        "slug": "daily-life-budget-time-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Budget & Time. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Daily Life — Budget & Time: 9",
        "slug": "daily-life-budget-time-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Budget & Time with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Budget & Time."
      }
    ]
  },
  {
    "name": "Daily Life — Health & Meals — Pack 3",
    "category": "student",
    "description": "Helpful prompts for daily life — health & meals.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Daily Life — Health & Meals: 1",
        "slug": "daily-life-health-meals-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Health & Meals. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Health & Meals."
      },
      {
        "title": "Daily Life — Health & Meals: 2",
        "slug": "daily-life-health-meals-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Health & Meals assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Daily Life — Health & Meals: 3",
        "slug": "daily-life-health-meals-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Health & Meals with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Health & Meals, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Daily Life — Health & Meals: 4",
        "slug": "daily-life-health-meals-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Health & Meals with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Health & Meals."
      },
      {
        "title": "Daily Life — Health & Meals: 5",
        "slug": "daily-life-health-meals-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Health & Meals. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Daily Life — Health & Meals: 6",
        "slug": "daily-life-health-meals-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Health & Meals, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Health & Meals that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Health & Meals topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Daily Life — Health & Meals: 7",
        "slug": "daily-life-health-meals-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Health & Meals. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Daily Life — Health & Meals: 8",
        "slug": "daily-life-health-meals-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Health & Meals organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "CS — Data Structures — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — data structures.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "cs-data-structures-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Data Structures with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Data Structures, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-data-structures-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Data Structures with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Data Structures."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-data-structures-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Data Structures. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-data-structures-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Data Structures organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-data-structures-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Data Structures. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-data-structures-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Data Structures. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Data Structures."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-data-structures-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Data Structures with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Data Structures including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "CS — Algorithms — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — algorithms.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-algorithms-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Algorithms. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Algorithms."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-algorithms-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Algorithms, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Algorithms that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Algorithms topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-algorithms-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Algorithms assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-algorithms-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Algorithms. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-algorithms-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Algorithms covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-algorithms-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Algorithms organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-algorithms-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Algorithms with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Algorithms, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "CS — Operating Systems — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — operating systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Practice Questions Bank",
        "slug": "cs-operating-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Operating Systems with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Operating Systems including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-operating-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Operating Systems assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-operating-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Operating Systems with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Operating Systems, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-operating-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Operating Systems. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Operating Systems."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-operating-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Operating Systems organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-operating-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Operating Systems covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "CS — Computer Networks — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — computer networks.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-computer-networks-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Computer Networks. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-computer-networks-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Computer Networks organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-computer-networks-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Computer Networks covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-computer-networks-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Computer Networks. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-computer-networks-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Computer Networks with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Computer Networks including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-computer-networks-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Computer Networks with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Computer Networks."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-computer-networks-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Computer Networks with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Computer Networks, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-computer-networks-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Computer Networks, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Computer Networks that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Computer Networks topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-computer-networks-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Computer Networks. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Computer Networks."
      }
    ]
  },
  {
    "name": "CS — Databases (SQL) — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — databases (sql).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-databases-sql-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Databases (SQL), each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Databases (SQL) that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Databases (SQL) topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-databases-sql-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Databases (SQL) organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-databases-sql-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Databases (SQL) assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-databases-sql-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Databases (SQL) with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Databases (SQL), include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-databases-sql-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Databases (SQL) with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Databases (SQL)."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-databases-sql-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Databases (SQL). Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "CS — NoSQL & MongoDB — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — nosql & mongodb.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "cs-nosql-mongodb-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for NoSQL & MongoDB with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in NoSQL & MongoDB, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-nosql-mongodb-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for NoSQL & MongoDB. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-nosql-mongodb-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for NoSQL & MongoDB, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from NoSQL & MongoDB that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how NoSQL & MongoDB topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-nosql-mongodb-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for NoSQL & MongoDB with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of NoSQL & MongoDB."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-nosql-mongodb-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for NoSQL & MongoDB. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-nosql-mongodb-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for NoSQL & MongoDB with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in NoSQL & MongoDB including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "CS — OOP in Python — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — oop in python.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-oop-in-python-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for OOP in Python. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to OOP in Python."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-oop-in-python-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for OOP in Python with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of OOP in Python."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-oop-in-python-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for OOP in Python with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in OOP in Python, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-oop-in-python-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for OOP in Python. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-oop-in-python-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for OOP in Python assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-oop-in-python-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for OOP in Python. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-oop-in-python-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for OOP in Python covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-oop-in-python-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for OOP in Python organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "CS — Web Dev (MERN) — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — web dev (mern).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-web-dev-mern-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Web Dev (MERN) covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-web-dev-mern-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Web Dev (MERN). Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-web-dev-mern-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Web Dev (MERN). For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Web Dev (MERN)."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-web-dev-mern-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Web Dev (MERN) with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Web Dev (MERN), include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-web-dev-mern-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Web Dev (MERN) assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-web-dev-mern-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Web Dev (MERN). Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-web-dev-mern-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Web Dev (MERN) organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-web-dev-mern-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Web Dev (MERN), each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Web Dev (MERN) that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Web Dev (MERN) topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-web-dev-mern-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Web Dev (MERN) with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Web Dev (MERN)."
      }
    ]
  },
  {
    "name": "CS — System Design Basics — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — system design basics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-system-design-basics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for System Design Basics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to System Design Basics."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-system-design-basics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for System Design Basics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-system-design-basics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for System Design Basics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-system-design-basics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for System Design Basics assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-system-design-basics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for System Design Basics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-system-design-basics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for System Design Basics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "CS — DevOps for Beginners — Pack 4",
    "category": "student",
    "description": "Helpful prompts for cs — devops for beginners.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-devops-for-beginners-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for DevOps for Beginners with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of DevOps for Beginners."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-devops-for-beginners-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for DevOps for Beginners. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-devops-for-beginners-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for DevOps for Beginners with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in DevOps for Beginners, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-devops-for-beginners-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for DevOps for Beginners with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in DevOps for Beginners including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-devops-for-beginners-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for DevOps for Beginners assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-devops-for-beginners-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for DevOps for Beginners, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from DevOps for Beginners that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how DevOps for Beginners topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-devops-for-beginners-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for DevOps for Beginners. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-devops-for-beginners-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for DevOps for Beginners covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "EE — Circuits & Signals — Pack 4",
    "category": "student",
    "description": "Helpful prompts for ee — circuits & signals.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "ee-circuits-signals-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Circuits & Signals with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Circuits & Signals."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "ee-circuits-signals-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Circuits & Signals. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "ee-circuits-signals-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Circuits & Signals assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "ee-circuits-signals-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Circuits & Signals organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "ee-circuits-signals-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Circuits & Signals. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "ee-circuits-signals-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Circuits & Signals, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Circuits & Signals that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Circuits & Signals topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "ee-circuits-signals-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Circuits & Signals. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Circuits & Signals."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "ee-circuits-signals-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Circuits & Signals with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Circuits & Signals including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "EE — Control Systems — Pack 4",
    "category": "student",
    "description": "Helpful prompts for ee — control systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "ee-control-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Control Systems. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "ee-control-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Control Systems, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Control Systems that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Control Systems topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "ee-control-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Control Systems. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Control Systems."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "ee-control-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Control Systems with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Control Systems."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "ee-control-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Control Systems with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Control Systems including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "ee-control-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Control Systems assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "ME — Thermodynamics — Pack 4",
    "category": "student",
    "description": "Helpful prompts for me — thermodynamics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "me-thermodynamics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Thermodynamics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "me-thermodynamics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Thermodynamics with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Thermodynamics."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "me-thermodynamics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Thermodynamics. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "me-thermodynamics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Thermodynamics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "me-thermodynamics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Thermodynamics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Thermodynamics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "me-thermodynamics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Thermodynamics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Thermodynamics."
      }
    ]
  },
  {
    "name": "ME — Strength of Materials — Pack 4",
    "category": "student",
    "description": "Helpful prompts for me — strength of materials.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Essential Formulas & Definitions",
        "slug": "me-strength-of-materials-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Strength of Materials. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "me-strength-of-materials-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Strength of Materials with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Strength of Materials."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "me-strength-of-materials-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Strength of Materials with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Strength of Materials including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "me-strength-of-materials-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Strength of Materials organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "me-strength-of-materials-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Strength of Materials covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "me-strength-of-materials-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Strength of Materials. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Strength of Materials."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "me-strength-of-materials-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Strength of Materials, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Strength of Materials that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Strength of Materials topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Civil — Structural Basics — Pack 4",
    "category": "student",
    "description": "Helpful prompts for civil — structural basics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Practice Questions Bank",
        "slug": "civil-structural-basics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Structural Basics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Structural Basics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "civil-structural-basics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Structural Basics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "civil-structural-basics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Structural Basics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "civil-structural-basics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Structural Basics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "civil-structural-basics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Structural Basics, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Structural Basics that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Structural Basics topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "civil-structural-basics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Structural Basics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Structural Basics."
      }
    ]
  },
  {
    "name": "Civil — Surveying & GIS — Pack 4",
    "category": "student",
    "description": "Helpful prompts for civil — surveying & gis.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "civil-surveying-gis-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Surveying & GIS assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "civil-surveying-gis-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Surveying & GIS. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Surveying & GIS."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "civil-surveying-gis-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Surveying & GIS covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "civil-surveying-gis-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Surveying & GIS with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Surveying & GIS."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "civil-surveying-gis-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Surveying & GIS. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Structured Study Plan",
        "slug": "civil-surveying-gis-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Surveying & GIS with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Surveying & GIS, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "civil-surveying-gis-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Surveying & GIS organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "civil-surveying-gis-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Surveying & GIS. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "civil-surveying-gis-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Surveying & GIS with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Surveying & GIS including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      }
    ]
  },
  {
    "name": "Math — Calculus — Pack 4",
    "category": "student",
    "description": "Helpful prompts for math — calculus.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-calculus-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Calculus assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-calculus-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Calculus with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Calculus, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "math-calculus-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Calculus. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Calculus."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-calculus-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Calculus, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Calculus that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Calculus topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "math-calculus-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Calculus covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-calculus-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Calculus with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Calculus including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-calculus-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Calculus. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-calculus-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Calculus with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Calculus."
      }
    ]
  },
  {
    "name": "Math — Linear Algebra — Pack 4",
    "category": "student",
    "description": "Helpful prompts for math — linear algebra.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "math-linear-algebra-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Linear Algebra with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Linear Algebra, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "math-linear-algebra-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Linear Algebra. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Linear Algebra."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-linear-algebra-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Linear Algebra, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Linear Algebra that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Linear Algebra topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "math-linear-algebra-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Linear Algebra assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "math-linear-algebra-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Linear Algebra covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-linear-algebra-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Linear Algebra. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  },
  {
    "name": "Math — Probability & Stats — Pack 4",
    "category": "student",
    "description": "Helpful prompts for math — probability & stats.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Learning Resources Guide",
        "slug": "math-probability-stats-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Probability & Stats organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "math-probability-stats-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Probability & Stats covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Structured Study Plan",
        "slug": "math-probability-stats-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Probability & Stats with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Probability & Stats, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "math-probability-stats-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Probability & Stats. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "math-probability-stats-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Probability & Stats, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Probability & Stats that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Probability & Stats topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "math-probability-stats-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Probability & Stats with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Probability & Stats."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "math-probability-stats-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Probability & Stats with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Probability & Stats including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "math-probability-stats-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Probability & Stats. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "math-probability-stats-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Probability & Stats. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Probability & Stats."
      }
    ]
  },
  {
    "name": "Physics — Core — Pack 4",
    "category": "student",
    "description": "Helpful prompts for physics — core.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Structured Study Plan",
        "slug": "physics-core-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Core with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Core, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "physics-core-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Core organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "physics-core-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Core with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Core."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "physics-core-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Core. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "physics-core-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Core with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Core including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "physics-core-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Core assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "physics-core-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Core covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Commerce — Accounting — Pack 4",
    "category": "student",
    "description": "Helpful prompts for commerce — accounting.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-accounting-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Accounting. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-accounting-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Accounting organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-accounting-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Accounting covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-accounting-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Accounting, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Accounting that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Accounting topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-accounting-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Accounting. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-accounting-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Accounting. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Accounting."
      }
    ]
  },
  {
    "name": "Commerce — Corporate Finance — Pack 4",
    "category": "student",
    "description": "Helpful prompts for commerce — corporate finance.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-corporate-finance-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Corporate Finance. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Corporate Finance."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-corporate-finance-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Corporate Finance assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-corporate-finance-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Corporate Finance, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Corporate Finance that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Corporate Finance topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-corporate-finance-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Corporate Finance. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-corporate-finance-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Corporate Finance. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-corporate-finance-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Corporate Finance with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Corporate Finance including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-corporate-finance-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Corporate Finance with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Corporate Finance, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      }
    ]
  },
  {
    "name": "Commerce — Marketing — Pack 4",
    "category": "student",
    "description": "Helpful prompts for commerce — marketing.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-marketing-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Marketing with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Marketing."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-marketing-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Marketing. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Marketing."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "commerce-marketing-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Marketing assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-marketing-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Marketing, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Marketing that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Marketing topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-marketing-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Marketing covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-marketing-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Marketing. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-marketing-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Marketing with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Marketing including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-marketing-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Marketing organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "Commerce — Operations & SCM — Pack 4",
    "category": "student",
    "description": "Helpful prompts for commerce — operations & scm.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-operations-scm-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Operations & SCM. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Operations & SCM."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-operations-scm-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Operations & SCM with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Operations & SCM."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-operations-scm-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Operations & SCM with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Operations & SCM including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-operations-scm-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Operations & SCM organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-operations-scm-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Operations & SCM. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "commerce-operations-scm-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Operations & SCM. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-operations-scm-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Operations & SCM covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Commerce — Business Law — Pack 4",
    "category": "student",
    "description": "Helpful prompts for commerce — business law.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "commerce-business-law-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Business Law, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Business Law that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Business Law topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-business-law-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Business Law covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-business-law-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Business Law. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-business-law-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Business Law. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Business Law."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-business-law-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Business Law with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Business Law including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "commerce-business-law-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Business Law with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Business Law."
      }
    ]
  },
  {
    "name": "Commerce — Economics — Pack 4",
    "category": "student",
    "description": "Helpful prompts for commerce — economics.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "commerce-economics-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Economics. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "commerce-economics-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Economics covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "commerce-economics-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Economics. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Economics."
      },
      {
        "title": "Structured Study Plan",
        "slug": "commerce-economics-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Economics with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Economics, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "commerce-economics-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Economics with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Economics including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "commerce-economics-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Economics organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      }
    ]
  },
  {
    "name": "Study Skills — Spaced Repetition — Pack 4",
    "category": "student",
    "description": "Helpful prompts for study skills — spaced repetition.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Study Skills — Spaced Repetition: 1",
        "slug": "study-skills-spaced-repetition-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Spaced Repetition. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Study Skills — Spaced Repetition: 2",
        "slug": "study-skills-spaced-repetition-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Spaced Repetition. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Spaced Repetition."
      },
      {
        "title": "Study Skills — Spaced Repetition: 3",
        "slug": "study-skills-spaced-repetition-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Spaced Repetition organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Study Skills — Spaced Repetition: 4",
        "slug": "study-skills-spaced-repetition-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Spaced Repetition with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Spaced Repetition."
      },
      {
        "title": "Study Skills — Spaced Repetition: 5",
        "slug": "study-skills-spaced-repetition-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Spaced Repetition. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Study Skills — Spaced Repetition: 6",
        "slug": "study-skills-spaced-repetition-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Spaced Repetition covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Study Skills — Spaced Repetition: 7",
        "slug": "study-skills-spaced-repetition-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Spaced Repetition, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Spaced Repetition that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Spaced Repetition topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Study Skills — Exam Strategy — Pack 4",
    "category": "student",
    "description": "Helpful prompts for study skills — exam strategy.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Study Skills — Exam Strategy: 1",
        "slug": "study-skills-exam-strategy-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Exam Strategy, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Exam Strategy that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Exam Strategy topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Study Skills — Exam Strategy: 2",
        "slug": "study-skills-exam-strategy-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Exam Strategy with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Exam Strategy."
      },
      {
        "title": "Study Skills — Exam Strategy: 3",
        "slug": "study-skills-exam-strategy-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Exam Strategy with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Exam Strategy, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Study Skills — Exam Strategy: 4",
        "slug": "study-skills-exam-strategy-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Exam Strategy. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Exam Strategy."
      },
      {
        "title": "Study Skills — Exam Strategy: 5",
        "slug": "study-skills-exam-strategy-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Exam Strategy with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Exam Strategy including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Study Skills — Exam Strategy: 6",
        "slug": "study-skills-exam-strategy-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Exam Strategy assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      }
    ]
  },
  {
    "name": "Writing — Reports & Thesis — Pack 4",
    "category": "student",
    "description": "Helpful prompts for writing — reports & thesis.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Writing — Reports & Thesis: 1",
        "slug": "writing-reports-thesis-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Reports & Thesis assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Writing — Reports & Thesis: 2",
        "slug": "writing-reports-thesis-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Reports & Thesis. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Writing — Reports & Thesis: 3",
        "slug": "writing-reports-thesis-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Reports & Thesis with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Reports & Thesis including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Writing — Reports & Thesis: 4",
        "slug": "writing-reports-thesis-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Reports & Thesis with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Reports & Thesis."
      },
      {
        "title": "Writing — Reports & Thesis: 5",
        "slug": "writing-reports-thesis-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Reports & Thesis covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Writing — Reports & Thesis: 6",
        "slug": "writing-reports-thesis-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Reports & Thesis, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Reports & Thesis that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Reports & Thesis topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Writing — Reports & Thesis: 7",
        "slug": "writing-reports-thesis-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Reports & Thesis. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Reports & Thesis."
      }
    ]
  },
  {
    "name": "Presentation — Slides & Delivery — Pack 4",
    "category": "student",
    "description": "Helpful prompts for presentation — slides & delivery.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Presentation — Slides & Delivery: 1",
        "slug": "presentation-slides-delivery-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Slides & Delivery with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Slides & Delivery, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Presentation — Slides & Delivery: 2",
        "slug": "presentation-slides-delivery-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Slides & Delivery. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Presentation — Slides & Delivery: 3",
        "slug": "presentation-slides-delivery-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Slides & Delivery. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Slides & Delivery."
      },
      {
        "title": "Presentation — Slides & Delivery: 4",
        "slug": "presentation-slides-delivery-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Slides & Delivery organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Presentation — Slides & Delivery: 5",
        "slug": "presentation-slides-delivery-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Slides & Delivery covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Presentation — Slides & Delivery: 6",
        "slug": "presentation-slides-delivery-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Slides & Delivery with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Slides & Delivery."
      },
      {
        "title": "Presentation — Slides & Delivery: 7",
        "slug": "presentation-slides-delivery-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Slides & Delivery. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Presentation — Slides & Delivery: 8",
        "slug": "presentation-slides-delivery-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Slides & Delivery with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Slides & Delivery including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Presentation — Slides & Delivery: 9",
        "slug": "presentation-slides-delivery-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Slides & Delivery, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Slides & Delivery that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Slides & Delivery topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Career — Resume & Portfolio — Pack 4",
    "category": "student",
    "description": "Helpful prompts for career — resume & portfolio.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Career — Resume & Portfolio: 1",
        "slug": "career-resume-portfolio-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Resume & Portfolio. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Career — Resume & Portfolio: 2",
        "slug": "career-resume-portfolio-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Resume & Portfolio covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Career — Resume & Portfolio: 3",
        "slug": "career-resume-portfolio-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Resume & Portfolio assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Career — Resume & Portfolio: 4",
        "slug": "career-resume-portfolio-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Resume & Portfolio with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Resume & Portfolio including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Career — Resume & Portfolio: 5",
        "slug": "career-resume-portfolio-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Resume & Portfolio organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Career — Resume & Portfolio: 6",
        "slug": "career-resume-portfolio-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Resume & Portfolio with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Resume & Portfolio."
      },
      {
        "title": "Career — Resume & Portfolio: 7",
        "slug": "career-resume-portfolio-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Resume & Portfolio. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Career — Resume & Portfolio: 8",
        "slug": "career-resume-portfolio-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Resume & Portfolio. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Resume & Portfolio."
      },
      {
        "title": "Career — Resume & Portfolio: 9",
        "slug": "career-resume-portfolio-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Resume & Portfolio, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Resume & Portfolio that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Resume & Portfolio topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Career — Interview Drills — Pack 4",
    "category": "student",
    "description": "Helpful prompts for career — interview drills.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Career — Interview Drills: 1",
        "slug": "career-interview-drills-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 2",
        "slug": "career-interview-drills-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 3",
        "slug": "career-interview-drills-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 4",
        "slug": "career-interview-drills-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 5",
        "slug": "career-interview-drills-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 6",
        "slug": "career-interview-drills-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 7",
        "slug": "career-interview-drills-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 8",
        "slug": "career-interview-drills-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      },
      {
        "title": "Career — Interview Drills: 9",
        "slug": "career-interview-drills-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Interview Drills. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Interview Drills."
      }
    ]
  },
  {
    "name": "Projects — Ideas & Scopes — Pack 4",
    "category": "student",
    "description": "Helpful prompts for projects — ideas & scopes.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Projects — Ideas & Scopes: 1",
        "slug": "projects-ideas-scopes-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Ideas & Scopes. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Ideas & Scopes."
      },
      {
        "title": "Projects — Ideas & Scopes: 2",
        "slug": "projects-ideas-scopes-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Ideas & Scopes covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Projects — Ideas & Scopes: 3",
        "slug": "projects-ideas-scopes-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Ideas & Scopes with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Ideas & Scopes."
      },
      {
        "title": "Projects — Ideas & Scopes: 4",
        "slug": "projects-ideas-scopes-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Ideas & Scopes assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Projects — Ideas & Scopes: 5",
        "slug": "projects-ideas-scopes-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 6",
        "slug": "projects-ideas-scopes-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 7",
        "slug": "projects-ideas-scopes-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Ideas & Scopes with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Ideas & Scopes including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Projects — Ideas & Scopes: 8",
        "slug": "projects-ideas-scopes-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Projects — Ideas & Scopes: 9",
        "slug": "projects-ideas-scopes-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Ideas & Scopes, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Ideas & Scopes that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Ideas & Scopes topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      }
    ]
  },
  {
    "name": "Coding — Project Scaffolds — Pack 4",
    "category": "student",
    "description": "Helpful prompts for coding — project scaffolds.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Coding — Project Scaffolds: 1",
        "slug": "coding-project-scaffolds-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 2",
        "slug": "coding-project-scaffolds-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Project Scaffolds covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Coding — Project Scaffolds: 3",
        "slug": "coding-project-scaffolds-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Project Scaffolds with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Project Scaffolds including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Coding — Project Scaffolds: 4",
        "slug": "coding-project-scaffolds-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 5",
        "slug": "coding-project-scaffolds-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 6",
        "slug": "coding-project-scaffolds-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Project Scaffolds, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Project Scaffolds that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Project Scaffolds topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Coding — Project Scaffolds: 7",
        "slug": "coding-project-scaffolds-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Project Scaffolds with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Project Scaffolds."
      },
      {
        "title": "Coding — Project Scaffolds: 8",
        "slug": "coding-project-scaffolds-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Project Scaffolds. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Project Scaffolds."
      }
    ]
  },
  {
    "name": "Daily Life — Budget & Time — Pack 4",
    "category": "student",
    "description": "Helpful prompts for daily life — budget & time.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Daily Life — Budget & Time: 1",
        "slug": "daily-life-budget-time-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Budget & Time with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Budget & Time, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Daily Life — Budget & Time: 2",
        "slug": "daily-life-budget-time-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Budget & Time. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Daily Life — Budget & Time: 3",
        "slug": "daily-life-budget-time-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Budget & Time assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Daily Life — Budget & Time: 4",
        "slug": "daily-life-budget-time-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Budget & Time. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Daily Life — Budget & Time: 5",
        "slug": "daily-life-budget-time-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Budget & Time, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Budget & Time that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Budget & Time topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Daily Life — Budget & Time: 6",
        "slug": "daily-life-budget-time-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Budget & Time with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Budget & Time including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Daily Life — Budget & Time: 7",
        "slug": "daily-life-budget-time-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Budget & Time with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Budget & Time."
      },
      {
        "title": "Daily Life — Budget & Time: 8",
        "slug": "daily-life-budget-time-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Budget & Time covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      }
    ]
  },
  {
    "name": "Daily Life — Health & Meals — Pack 4",
    "category": "student",
    "description": "Helpful prompts for daily life — health & meals.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Daily Life — Health & Meals: 1",
        "slug": "daily-life-health-meals-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Health & Meals. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Health & Meals."
      },
      {
        "title": "Daily Life — Health & Meals: 2",
        "slug": "daily-life-health-meals-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Health & Meals. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Daily Life — Health & Meals: 3",
        "slug": "daily-life-health-meals-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Health & Meals with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Health & Meals, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Daily Life — Health & Meals: 4",
        "slug": "daily-life-health-meals-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Health & Meals with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Health & Meals including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Daily Life — Health & Meals: 5",
        "slug": "daily-life-health-meals-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Health & Meals organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Daily Life — Health & Meals: 6",
        "slug": "daily-life-health-meals-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Health & Meals. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  },
  {
    "name": "CS — Data Structures — Pack 5",
    "category": "student",
    "description": "Helpful prompts for cs — data structures.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Practice Questions Bank",
        "slug": "cs-data-structures-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Data Structures with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Data Structures including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-data-structures-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Data Structures with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Data Structures, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-data-structures-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Data Structures, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Data Structures that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Data Structures topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-data-structures-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Data Structures. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-data-structures-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Data Structures. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-data-structures-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Data Structures with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Data Structures."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-data-structures-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Data Structures. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Data Structures."
      }
    ]
  },
  {
    "name": "CS — Algorithms — Pack 5",
    "category": "student",
    "description": "Helpful prompts for cs — algorithms.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-algorithms-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Algorithms assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-algorithms-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Algorithms with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Algorithms, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-algorithms-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Algorithms with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Algorithms."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-algorithms-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for Algorithms covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-algorithms-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Algorithms with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Algorithms including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-algorithms-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Algorithms organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-algorithms-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Algorithms, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Algorithms that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Algorithms topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-algorithms-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Algorithms. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Algorithms."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-algorithms-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Algorithms. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "CS — Operating Systems — Pack 5",
    "category": "student",
    "description": "Helpful prompts for cs — operating systems.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-operating-systems-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Operating Systems, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Operating Systems that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Operating Systems topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-operating-systems-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Operating Systems. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-operating-systems-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Operating Systems assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-operating-systems-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Operating Systems with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Operating Systems, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-operating-systems-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Operating Systems. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-operating-systems-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Operating Systems with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Operating Systems."
      }
    ]
  },
  {
    "name": "CS — Computer Networks — Pack 5",
    "category": "student",
    "description": "Helpful prompts for cs — computer networks.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-computer-networks-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Computer Networks assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-computer-networks-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for Computer Networks organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-computer-networks-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Computer Networks with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Computer Networks."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-computer-networks-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Computer Networks with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Computer Networks, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-computer-networks-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Computer Networks. Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-computer-networks-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Computer Networks, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Computer Networks that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Computer Networks topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-computer-networks-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Computer Networks. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-computer-networks-8",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Computer Networks with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Computer Networks including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-computer-networks-9",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for Computer Networks. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to Computer Networks."
      }
    ]
  },
  {
    "name": "CS — Databases (SQL) — Pack 5",
    "category": "student",
    "description": "Helpful prompts for cs — databases (sql).",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-databases-sql-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for Databases (SQL), each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from Databases (SQL) that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how Databases (SQL) topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-databases-sql-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for Databases (SQL). Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-databases-sql-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for Databases (SQL) with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in Databases (SQL), include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Assignment Peer-Review Rubric",
        "slug": "cs-databases-sql-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a detailed peer-review rubric for Databases (SQL) assignments that evaluates: 1) Correctness and Accuracy (30%) - Are solutions correct? Are formulas/concepts applied properly? Are edge cases handled? 2) Depth of Understanding (25%) - Clear explanation of concepts, proper justification of approaches, understanding of underlying principles, 3) Quality of Work (20%) - Organization, clarity, proper notation/terminology, professional presentation, 4) Problem-Solving Approach (15%) - Logical methodology, efficient solutions, creative thinking, 5) Completeness (10%) - All requirements met, thorough analysis, proper documentation. Include a 5-point scale (Excellent, Good, Satisfactory, Needs Improvement, Unsatisfactory) for each criterion with specific descriptors for each level. Add sections for: strengths identified, areas for improvement, constructive feedback, and overall recommendation."
      },
      {
        "title": "Practice Questions Bank",
        "slug": "cs-databases-sql-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate 30-40 practice questions for Databases (SQL) with varied difficulty: 10-12 Easy, 15-20 Medium, 5-8 Hard. For each question provide: 1) Clear problem statement with all necessary information, 2) Input/output specifications or what needs to be solved, 3) Difficulty level and estimated time to solve, 4) Topic tags indicating which concepts are tested, 5) Progressive hints (conceptual hint, approach hint, detailed hint), 6) Expected solution approach or answer format, 7) Key concepts required to solve. Cover all major topics in Databases (SQL) including: fundamental concepts, intermediate applications, advanced problems, mixed concept questions, and real-world scenarios. Include multiple question types: multiple choice, short answer, numerical problems, derivations, and application-based questions. Ensure questions build upon each other in complexity."
      },
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-databases-sql-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for Databases (SQL) with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of Databases (SQL)."
      },
      {
        "title": "Essential Formulas & Definitions",
        "slug": "cs-databases-sql-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Summarize all must-know formulas, definitions, and key concepts for Databases (SQL). Organize as: 1) Fundamental Definitions - core terms with precise definitions, intuitive explanations, and examples, 2) Essential Formulas - all critical formulas with: formula notation, variable definitions, units/dimensions, when to apply, derivation hints, 3) Key Theorems - important theorems with: statement, conditions, implications, proof sketch, applications, 4) Standard Procedures - step-by-step algorithms or methods for common problem types, 5) Important Constants - numerical values, symbols, contexts where used, 6) Relationships - how concepts connect, dependencies, hierarchies, 7) Conversion Factors - unit conversions, scaling relationships, 8) Quick Rules - rules of thumb, approximations, shortcuts. For each item include: mathematical/formal notation, plain English explanation, visual representation where helpful, example application, and common variations. Highlight items most frequently tested in exams."
      }
    ]
  },
  {
    "name": "CS — NoSQL & MongoDB — Pack 5",
    "category": "student",
    "description": "Helpful prompts for cs — nosql & mongodb.",
    "tags": [
      "student",
      "engineering",
      "commerce",
      "study"
    ],
    "rating": 4.9,
    "installs": 0,
    "assets": [
      {
        "title": "Step-by-Step Problem Solutions",
        "slug": "cs-nosql-mongodb-1",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide 5-7 fully solved examples for NoSQL & MongoDB with complete step-by-step explanations. For each problem: 1) State the problem clearly with context and real-world relevance, 2) List given information and what needs to be found, 3) Explain the intuition and approach before solving, 4) Show detailed solution steps with explanations for each step, 5) Highlight key concepts and formulas used, 6) Provide complete calculations or code implementation, 7) Verify the solution and check for reasonableness, 8) Discuss common mistakes to avoid, 9) Suggest variations and related problems, 10) Include visual aids (diagrams, graphs, tables) where helpful. Cover diverse difficulty levels and problem types to give comprehensive understanding of NoSQL & MongoDB."
      },
      {
        "title": "Comprehensive Cheat Sheet",
        "slug": "cs-nosql-mongodb-2",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive cheat sheet for NoSQL & MongoDB covering all essential topics. Structure it as: 1) Key Definitions - fundamental concepts with clear explanations, 2) Important Formulas - all critical formulas with variable definitions and when to use them, 3) Core Theorems/Principles - main theoretical foundations with brief proofs or justifications, 4) Common Techniques - standard approaches and methods with examples, 5) Problem-Solving Strategies - step-by-step frameworks for different problem types, 6) Common Pitfalls - frequent mistakes and how to avoid them, 7) Quick Reference Tables - comparison charts, complexity tables, or summary matrices, 8) Visual Aids - diagrams, flowcharts, or concept maps for complex topics. For each item include: concise explanation, practical application, example usage, and cross-references to related concepts. Make it printer-friendly and organized for quick revision."
      },
      {
        "title": "Interview & Viva Questions",
        "slug": "cs-nosql-mongodb-3",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Generate a comprehensive list of 20-25 common interview and viva questions for NoSQL & MongoDB. For each question, include: 1) The question itself with clear context, 2) Difficulty level (Easy/Medium/Hard), 3) Key concepts being tested, 4) A brief hint or approach for answering, 5) Related follow-up questions that interviewers might ask, 6) Real-world application context. Organize questions by topic area and include both theoretical concepts and practical implementation questions. Cover fundamental concepts, advanced topics, problem-solving scenarios, and system design aspects relevant to NoSQL & MongoDB."
      },
      {
        "title": "Structured Study Plan",
        "slug": "cs-nosql-mongodb-4",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create a comprehensive 7-day study plan for NoSQL & MongoDB with daily structured learning. For each day include: 1) Learning Objectives - specific goals and topics to master, 2) Theory Section (2-3 hours) - concepts to study with recommended resources (video lectures, textbook chapters, articles), 3) Practice Problems (2-3 hours) - specific problems to solve with difficulty progression, 4) Key Formulas/Concepts - what to memorize and understand deeply, 5) Self-Assessment - quiz questions to test understanding, 6) Additional Resources - supplementary materials for deeper learning, 7) Time Allocation - realistic breakdown of study activities. Structure the plan to: start with fundamentals, build up complexity gradually, include regular review sessions, mix theory with practice, cover all major topics in NoSQL & MongoDB, include rest/consolidation days, and end with comprehensive review. Provide specific problem counts, resource links, and milestone checkpoints."
      },
      {
        "title": "Mini-Project Ideas",
        "slug": "cs-nosql-mongodb-5",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Create 4-5 detailed mini-project briefs for NoSQL & MongoDB, each including: 1) Project Title and Overview - engaging description of what will be built, 2) Learning Objectives - specific concepts and skills from NoSQL & MongoDB that will be applied, 3) Detailed Requirements - features to implement, specifications, and deliverables, 4) Technical Approach - recommended tools, technologies, and methodologies, 5) Implementation Phases - break down into 3-4 milestones with timelines, 6) Core Concepts Applied - how NoSQL & MongoDB topics are used in the project, 7) Testing Strategy - how to verify correctness and performance, 8) Bonus Features - optional enhancements for advanced students, 9) Evaluation Criteria - how the project will be assessed, 10) Resources - links to relevant documentation and tutorials. Each project should be practical, engaging, hands-on, and completable in 2-3 weeks. Projects should range from beginner-friendly to challenging."
      },
      {
        "title": "Learning Resources Guide",
        "slug": "cs-nosql-mongodb-6",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Recommend comprehensive learning resources for NoSQL & MongoDB organized by type and difficulty level. Include: 1) Textbooks - classic and modern books with brief descriptions, target audience, and what makes each valuable, 2) Online Courses - MOOCs, video lecture series with platform names, instructors, and course structure, 3) Video Tutorials - YouTube channels, educational platforms with specific playlists for different topics, 4) Interactive Platforms - coding sites, simulation tools, practice platforms with hands-on learning, 5) Documentation - official docs, reference materials, API guides, 6) Research Papers - seminal papers and recent advances for advanced learners, 7) Community Resources - forums, discussion groups, Q&A sites, study groups, 8) Tools and Software - IDEs, simulators, calculators, visualization tools. For each resource provide: name, link/access method, difficulty level (Beginner/Intermediate/Advanced), time commitment, cost (free/paid), key topics covered, and why it's recommended. Organize by learning path: start here for beginners, intermediate progression, advanced mastery."
      },
      {
        "title": "Debugging Tips & Common Pitfalls",
        "slug": "cs-nosql-mongodb-7",
        "tags": [
          "student",
          "study",
          "college"
        ],
        "content": "Provide comprehensive debugging tips and common pitfalls for NoSQL & MongoDB. Cover: 1) Conceptual Mistakes - misunderstandings of fundamental principles, wrong assumptions, incorrect interpretations, 2) Calculation Errors - common arithmetic mistakes, unit conversion errors, sign errors, rounding issues, 3) Methodological Pitfalls - wrong approach selection, missing steps, incorrect order of operations, 4) Edge Cases - boundary conditions often missed, special cases to consider, exceptions to rules, 5) Common Misconceptions - frequently confused concepts, similar-looking but different ideas, 6) Problem-Solving Traps - patterns that seem right but fail, greedy approaches that don't work, 7) Verification Techniques - how to check your work, sanity checks, validation methods, 8) Optimization Mistakes - premature optimization, wrong complexity analysis. For each pitfall provide: what it is, why it happens, how to detect it, how to fix it, and a concrete example demonstrating the issue and solution. Include preventive strategies and best practices."
      }
    ]
  }
];

module.exports = studentPacks;
